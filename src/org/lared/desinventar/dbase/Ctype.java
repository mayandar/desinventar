package org.lared.desinventar.dbase;

/*
* Ctype from the C library for determining byte types.
* Determines if a byte is printable, ascii, isalpha, isnumeric, ...
*
* Copyright 1998, 1999 Michael Lecuyer, all rights reserved.
*
* This program is free software; you can redistribute it and/or
* modify it under the terms of the GNU General Public License
* as published by the Free Software Foundation; either version 2
* of the License, or (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
*
*/

public class Ctype
{
	// Some test code.
	//
	public static void main(String args[])
	{
		byte c;
		c = (byte)'A';
		System.out.println("a is alpha: " + isalpha(c));
		c = (byte)'B';
		System.out.println("z is alpha: " + isalpha(c));
		c = (byte)'1';
		System.out.println("1 is alpha: " + isalpha(c));
		c = (byte)' ';
		System.out.println("' ' isspace: " + isspace(c));
		System.out.println("' ' isspace: " + isspace(c));
		c = (byte)'\t';
		System.out.println("'\\t' isspace: " + isspace(c));
		c = (byte)'\n';
		System.out.println("'\\n' isspace: " + isspace(c));
	}

	// Character classes
	private static final int _U = 0x01;	// Upper Case
	private static final int _L = 0x02;	// Lower Case
	private static final int _N = 0x04;	// Number
	private static final int _S = 0x08;	// Space character
	private static final int _P = 0x10;	// Punctuation
	private static final int _C = 0x20;	// Control character
	private static final int _X = 0x40;	// Hexadecimal character
	private static final int _B = 0x80; // Blank space ' '

	// Table of character classes
	//
	private static int ctype[]= {
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,	0x20,
	0x20, 0x28, 0x28, 0x28, 0x28, 0x28, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x88, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
	0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
	0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44, 0x44,
	0x44, 0x44, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
	0x10, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x01,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x01, 0x01, 0x01, 0x10, 0x10, 0x10, 0x10, 0x10,
	0x10, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x02,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
	0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
	0x02, 0x02, 0x02, 0x10, 0x10, 0x10, 0x10, 0x20,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};


	public static boolean isalpha(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & (_U|_L)) > 0;
	}
	public static boolean isupper(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & _U) > 0;
	}
	public static boolean islower(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & _L) > 0;
	}
	public static boolean isdigit(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & _N) > 0;
	}
	public static boolean isxdigit(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & _X) > 0;
	}
	public static boolean isspace(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & _S) > 0;
	}
	public static boolean ispunct(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & _P) > 0;
	}
	public static boolean isalnum(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & (_U|_L|_N)) > 0;
	}
	public static boolean isprint(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & (_P|_U|_L|_N|_B)) > 0;
	}
	public static boolean isgraph(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & (_P|_U|_L|_N)) > 0;
	}
	public static boolean iscntrl(byte c)
	{
		int i = ((int)c & 0xff);
		return (ctype[i] & _C) > 0;
	}
	public static boolean isascii(byte c)
	{
		return (((int)(c)) & 0xff) <= 0x1f;
	}
	public static byte toascii(byte c)
	{
		return (byte)(c & 0x1f);
	}

}
