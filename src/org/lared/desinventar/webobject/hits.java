package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import org.lared.desinventar.util.*;
import org.lared.desinventar.system.*;
import org.lared.desinventar.webobject.*;


// CLASS NAME
// generated by webObjectGenerator...
public class hits extends webObject
{


    // DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
     public   String   dhitdate;
     public   String sipaddress;
     public   String spagename;
     public   String scountry;



  //--------------------------------------------------------------------------------
  // creates a hash table with field values of the data members
  //--------------------------------------------------------------------------------

  public void updateHashTable()
  {
  // FIELD NAMES VECTOR
     int nMaxFields=4;
       asFieldNames.put("dhitdate",dhitdate);
       asFieldNames.put("sipaddress",sipaddress);
       asFieldNames.put("spagename",spagename);
       asFieldNames.put("scountry",scountry);

  }




  //--------------------------------------------------------------------------------
  // constructor of the class. it initializes the object variables
  //--------------------------------------------------------------------------------

  // CONSTRUCTOR
public void init()
{
    lastError="NO errors detected";
    dhitdate="";
    sipaddress="";
    spagename="";
    scountry="";
    updateHashTable();
    }



public hits()
    {
    super("hits object");
    init();
    }
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// METHODS FOR: dhitdate
public String getDhitdate()
    {
    return dhitdate;
    }
public void setDhitdate(String sParameter)
    {
    dhitdate= strDate(sParameter);
    }
// end of methodhs for Dhitdate
//--------------------------------------------------------------------------------
// METHODS FOR: sipaddress
public String getSipaddress()
    {
    return sipaddress;
    }
public void setSipaddress(String sParameter)
    {
    sipaddress= sParameter;
    }
// end of methodhs for Sipaddress
//--------------------------------------------------------------------------------
// METHODS FOR: spagename
public String getSpagename()
    {
    return spagename;
    }
public void setSpagename(String sParameter)
    {
    spagename= sParameter;
    }
// end of methodhs for Spagename
//--------------------------------------------------------------------------------
// METHODS FOR: scountry
public String getScountry()
    {
    return scountry;
    }
public void setScountry(String sParameter)
    {
    scountry= sParameter;
    }
// end of methodhs for Scountry


  //----------------------------------------------------------------
  // Operational methods any webObject must have. Abstract class
  // provides templates and default behaviour (return error)
  //----------------------------------------------------------------



  //--------------------------------------------------------------------------------
  // retrieves object info from HTML form fields
  //--------------------------------------------------------------------------------
  public int getForm(  HttpServletRequest req,
                       HttpServletResponse resp,
                       Connection con)
    {


    // GET_FORM()
     dhitdate=strDate(not_null(req.getParameter("dhitdate")));
     sipaddress=not_null(req.getParameter(assignName("sipaddress")));
     spagename=not_null(req.getParameter(assignName("spagename")));
     scountry=not_null(req.getParameter(assignName("scountry")));


    updateHashTable();
    return 0;
    }

  //--------------------------------------------------------------------------------
  // loads an object from a record read from database
  //--------------------------------------------------------------------------------
  public void loadWebObject(ResultSet rset)
    {
    try
        {
        // SQL_LOAD
           dhitdate=strDate(rset.getDate("dhitdate"));
           sipaddress=not_null(rset.getString("sipaddress"));
           spagename=not_null(rset.getString("spagename"));
           scountry=not_null(rset.getString("scountry"));

        }
    catch (Exception e)
        {
        lastError="<!-Error loading WebObject: "+ e.toString()+" : "+sSql+"-->";
        }
    updateHashTable();
    }



  //--------------------------------------------------------------------------------
  // reads an object from the database
  //--------------------------------------------------------------------------------
  public int getWebObject(Connection con)
    {
      try
        {
        // creates the statement handle
        stmt = con.createStatement (ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);

        // SQL_GET
        sSql="SELECT * FROM HITS";
        sSql+=" WHERE ";


        rset = stmt.executeQuery (sSql);
        int nrows=1;
        if (rset.next ())
           loadWebObject(rset);
        else
           nrows=0;
        // releases the statement object
        stmt.close();
        lastError="";   // "NO ERROR. sql="+sSql;
        return nrows;
        }
    catch(Exception ex)
            {
            //Trap and report SQL errors
        lastError="<!-Error getting persistentObject: "+ ex.toString()+" : "+sSql+"-->";
            }

    return -1;
    }


  //--------------------------------------------------------------------------------
  // adds a new object to the database
  //--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {

      try
        {
        // creates the statement handle
        stmt = con.createStatement (ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);

        // SQL_INSERT
      sSql="insert into HITS (";
      sSql+="dhitdate,sipaddress,spagename,scountry";
      sSql+=") VALUES ("+sqlDate(dhitdate);
      sSql+=","+"'"+ check_quotes(sipaddress)+"'";
      sSql+=","+"'"+ check_quotes(spagename)+"'";
      sSql+=","+"'"+ check_quotes(scountry)+"'";
      sSql+=")";

        int nrows=stmt.executeUpdate (sSql);
        // releases the statement object
        stmt.close();
        lastError="";   // "NO ERROR. sql="+sSql;
        return nrows;
        }
     catch(Exception ex)
            {
            //Trap and report SQL errors
        lastError="<!-Error adding persistentObject: "+ ex.toString()+" : "+sSql+"-->";
        return -1;
            }
    }

  //--------------------------------------------------------------------------------
  // updates an existing object in the database
  //--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
    try
        {
        // creates the statement handle
        stmt = con.createStatement (ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);

        // SQL_UPDATE
        sSql="UPDATE HITS SET ";
        sSql+="dhitdate="+sqlDate(dhitdate);
        sSql+=",sipaddress="+"'"+check_quotes(sipaddress)+"'";
        sSql+=",spagename="+"'"+check_quotes(spagename)+"'";
        sSql+=",scountry="+"'"+check_quotes(scountry)+"'";
        sSql+=" WHERE ";


        int nrows=stmt.executeUpdate (sSql);
        // releases the statement object
        stmt.close();
        lastError="";   // "NO ERROR. sql="+sSql;
        return nrows;
        }
    catch(Exception ex)
            {
            //Trap and report SQL errors
        lastError="<!-Error updating webObject: "+ ex.toString()+" : "+sSql+"-->";
            }


    return -1;
    }

  //-------------------------------------------------------------------------------
  // deletes an existing object in the database
  //--------------------------------------------------------------------------------
  public int deleteWebObject(Connection con)
    {

      try
        {
        // creates the statement handle
        stmt = con.createStatement (ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);


        // SQL_DELETE
        sSql="DELETE FROM HITS";
        sSql+=" WHERE ";


        nrows=stmt.executeUpdate (sSql);
        // releases the statement object
        stmt.close();
        lastError="";   // "NO ERROR. sql="+sSql;
        return nrows;
        }
    catch(Exception ex)
            {
            //Trap and report SQL errors
        lastError="<!-Error deleting webObject: "+ ex.toString()+" : "+sSql+"-->";
            }
    return -1;
    }
}


/*   HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>dhitdate:</td><td> <INPUT type='TEXT' size='10' maxlength='10' name='dhitdate' VALUE="<%=beanName.dhitdate%>"></td></tr>
<tr><td>sipaddress:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='sipaddress' VALUE="<%=beanName.sipaddress%>"></td></tr>
<tr><td>spagename:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='spagename' VALUE="<%=beanName.spagename%>"></td></tr>
<tr><td>scountry:</td><td>  <INPUT type='TEXT' size='3' maxlength='2' name='scountry' VALUE="<%=beanName.scountry%>"></td></tr>
</table>
END HTML TEMPLATE */
