//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import org.lared.desinventar.util.*;
import org.lared.desinventar.system.*;
import org.lared.desinventar.webobject.*;


//CLASS NAME
// generated by persistentObjectGenerator...
public class dtproperties extends webObject
{
    public int dbType=Sys.iDatabaseType;	
	// DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
     public   int      id;
     public   int      objectid;
     public   String property;
     public   String value;
     public   String uvalue;
     public   String lvalue;
     public   int      version;

	//--------------------------------------------------------------------------------
	// creates a hash table with field values of the data members
	//--------------------------------------------------------------------------------

  public void updateHashTable()
  {
		// FIELD NAMES VECTOR
		asFieldNames.put("id", String.valueOf(id));
		asFieldNames.put("objectid", String.valueOf(objectid));
		asFieldNames.put("property", property);
		asFieldNames.put("value", value);
		asFieldNames.put("uvalue", uvalue);
		asFieldNames.put("lvalue", lvalue);
		asFieldNames.put("version", String.valueOf(version));

	}

	//--------------------------------------------------------------------------------
	// constructor of the class. it initializes the object variables
	//--------------------------------------------------------------------------------

	// CONSTRUCTOR
	public void init()
	{
		lastError="No errors detected";
		id = 0;
		objectid = 0;
		property = "";
		value = "";
		uvalue = "";
		lvalue = "";
		version = 0;
		updateHashTable();
	}

	public dtproperties()
	{
		super("dtproperties object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// METHODS FOR: id
	public String getId()
	{
		return Integer.toString(id);
	}

	public void setId(String sParameter)
	{
		id = extendedParseInt(sParameter);
	}
// end of methods for Id
//--------------------------------------------------------------------------------
// METHODS FOR: objectid
	public String getObjectid()
	{
		return Integer.toString(objectid);
	}

	public void setObjectid(String sParameter)
	{
		objectid = extendedParseInt(sParameter);
	}
// end of methods for Objectid
//--------------------------------------------------------------------------------
// METHODS FOR: property
	public String getProperty()
	{
		return property;
	}

	public void setProperty(String sParameter)
	{
		property = sParameter;
	}
// end of methods for Property
//--------------------------------------------------------------------------------
// METHODS FOR: value
	public String getValue()
	{
		return value;
	}

	public void setValue(String sParameter)
	{
		value = sParameter;
	}
// end of methods for Value
//--------------------------------------------------------------------------------
// METHODS FOR: uvalue
	public String getUvalue()
	{
		return uvalue;
	}

	public void setUvalue(String sParameter)
	{
		uvalue = sParameter;
	}
// end of methods for Uvalue
//--------------------------------------------------------------------------------
// METHODS FOR: lvalue
	public String getLvalue()
	{
		return lvalue;
	}

	public void setLvalue(String sParameter)
	{
		lvalue = sParameter;
	}
// end of methods for Lvalue
//--------------------------------------------------------------------------------
// METHODS FOR: version
	public String getVersion()
	{
		return Integer.toString(version);
	}

	public void setVersion(String sParameter)
	{
		version = extendedParseInt(sParameter);
	}
// end of methods for Version

	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// retrieves object info from HTML form fields
	//--------------------------------------------------------------------------------
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		id = extendedParseInt(req.getParameter(assignName("id")));
		objectid = extendedParseInt(req.getParameter(assignName("objectid")));
		property = not_null(req.getParameter(assignName("property")));
		value = not_null(req.getParameter(assignName("value")));
		uvalue = not_null(req.getParameter(assignName("uvalue")));
		lvalue = not_null(req.getParameter(assignName("lvalue")));
		version = extendedParseInt(req.getParameter(assignName("version")));

		updateHashTable();
		return 0;
	}

	//--------------------------------------------------------------------------------
	// loads an object from a record read from database
	//--------------------------------------------------------------------------------
  public void loadWebObject(ResultSet rset)
    {
		try {
			// SQL_LOAD

			try {
				id = rset.getInt("id");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field id -->";
				System.out.println(ex.toString());
			}

			try {
				objectid = rset.getInt("objectid");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field objectid -->";
				System.out.println(ex.toString());
			}

			try {
				property = not_null(rset.getString("property"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field property -->";
				System.out.println(ex.toString());
			}

			try {
				value = not_null(rset.getString("value"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field value -->";
				System.out.println(ex.toString());
			}

			try {
				uvalue = not_null(rset.getString("uvalue"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field uvalue -->";
				System.out.println(ex.toString());
			}

			try {
				lvalue = not_null(rset.getString("lvalue"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field lvalue -->";
				System.out.println(ex.toString());
			}

			try {
				version = rset.getInt("version");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field version -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	//--------------------------------------------------------------------------------
	// reads an object from the database
	//--------------------------------------------------------------------------------
  public int getWebObject(Connection con)
    {
		try {		
			// SQL_GET
			int f=1;
			sSql = "SELECT id,objectid,property,value,uvalue,lvalue,version FROM dtproperties";
			sSql += " WHERE (id = ?) AND (property = ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, id);

			if (property == null || property.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, property);			rset = pstmt.executeQuery();
			int nrows = 1;
			if (rset.next())
				loadWebObject(rset);
			else
				nrows = 0;
			// releases the statement object
			rset.close();
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql
					+ " -->";
		}

		return -1;
	}

	//--------------------------------------------------------------------------------
	// adds a new object to the database
	//--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {
		try {
			// SQL_INSERT
			int f=1;
			sSql = "insert into dtproperties (";
			sSql += "id, objectid, property, value, uvalue, lvalue, version)";
			sSql += "VALUES (?, ?, ?, ?, ?, ?, ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, id);
			pstmt.setInt(f++, objectid);

			if (property == null || property.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, property);

			if (value == null || value.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, value);

			if (uvalue == null || uvalue.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, uvalue);

			if (lvalue == null || lvalue.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, lvalue);
			pstmt.setInt(f++, version);


			int nrows = pstmt.executeUpdate();
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			System.out.println("ERROR (adding web object): "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			return -1;
		}
	}

	//--------------------------------------------------------------------------------
	// updates an existing object in the database
	//--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
		try {
			// SQL_UPDATE
			int f=1;
			sSql = "UPDATE dtproperties SET ";
			sSql += "objectid = ?";
			sSql += ", value = ?";
			sSql += ", uvalue = ?";
			sSql += ", lvalue = ?";
			sSql += ", version = ?";
			sSql += " WHERE (id = ?) AND (property = ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, objectid);

			if (value == null || value.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, value);

			if (uvalue == null || uvalue.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, uvalue);

			if (lvalue == null || lvalue.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, lvalue);
			pstmt.setInt(f++, version);


			pstmt.setInt(f++, id);

			if (property == null || property.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, property);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
		}

		return -1;
	}

	//-------------------------------------------------------------------------------
	// deletes an existing object in the database
	//--------------------------------------------------------------------------------
	public int deleteWebObject(Connection con) {

		try {
			// SQL_DELETE
			int f=1;
			sSql = "DELETE FROM dtproperties";
			sSql += " WHERE (id = ?) AND (property = ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, id);

			if (property == null || property.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, property);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
		}
		return -1;
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>id:</td><td>  <INPUT type='TEXT' size='5' maxlength='11' name='id' VALUE="<%=beanName.id%>"></td></tr>
<tr><td>objectid:</td><td>  <INPUT type='TEXT' size='5' maxlength='11' name='objectid' VALUE="<%=beanName.objectid%>"></td></tr>
<tr><td>property:</td><td>  <INPUT type='TEXT' size='50' maxlength='64' name='property' VALUE="<%=beanName.property%>"></td></tr>
<tr><td>value:</td><td>  <INPUT type='TEXT' size='50' maxlength='255' name='value' VALUE="<%=beanName.value%>"></td></tr>
<tr><td>uvalue:</td><td>  <INPUT type='TEXT' size='50' maxlength='255' name='uvalue' VALUE="<%=beanName.uvalue%>"></td></tr>
<tr><td>lvalue:</td><td>  <INPUT type='TEXT' size='-2147483648' maxlength='2147483647' name='lvalue' VALUE="<%=beanName.lvalue%>"></td></tr>
<tr><td>version:</td><td>  <INPUT type='TEXT' size='5' maxlength='11' name='version' VALUE="<%=beanName.version%>"></td></tr>
</table>
END HTML TEMPLATE */
