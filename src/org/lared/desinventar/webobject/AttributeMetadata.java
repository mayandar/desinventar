//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;


//CLASS NAME
// generated by WebObjectGenerator...
public class AttributeMetadata extends webObject
{

	// DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
	public 	String field_table;
	public 	String field_name;
	public 	String field_label;
	public 	String field_label_en;
	public 	String field_description;
	public 	String field_description_en;
	public 	String field_date;
	public 	String field_source;

	//--------------------------------------------------------------------------------
	// creates a hash table with field values of the data members
	//--------------------------------------------------------------------------------

	public void updateHashTable() {
		// FIELD NAMES VECTOR
		asFieldNames.put("field_table", field_table);
		asFieldNames.put("field_name", field_name);
		asFieldNames.put("field_label", field_label);
		asFieldNames.put("field_label_en", field_label_en);
		asFieldNames.put("field_description", field_description);
		asFieldNames.put("field_description_en", field_description_en);
		asFieldNames.put("field_date", field_date);
		asFieldNames.put("field_source", field_source);

	}

	//--------------------------------------------------------------------------------
	// update data members with values stored in hash table
	//--------------------------------------------------------------------------------

	public void updateMembersFromHashTable() {
		// REVERSE FIELD NAMES VECTOR
		setField_table((String)asFieldNames.get("field_table"));
		setField_name((String)asFieldNames.get("field_name"));
		setField_label((String)asFieldNames.get("field_label"));
		setField_label_en((String)asFieldNames.get("field_label_en"));
		setField_description((String)asFieldNames.get("field_description"));
		setField_description_en((String)asFieldNames.get("field_description_en"));
		setField_date((String)asFieldNames.get("field_date"));
		setField_source((String)asFieldNames.get("field_source"));

	}
	//--------------------------------------------------------------------------------
	// constructor of the class. it initializes the object variables
	//--------------------------------------------------------------------------------

	// CONSTRUCTOR
	public void init() {
		lastError="No errors detected";
		field_table = "";
		field_name = "";
		field_label = "";
		field_label_en = "";
		field_description = "";
		field_description_en = "";
		field_date = "";
		field_source = "";
		updateHashTable();
	}

	public AttributeMetadata() {
		super("AttributeMetadata object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'field_table'
	public String getField_table() {
		return field_table;
	}

	public void setField_table(String sParameter) {
		field_table = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'field_name'
	public String getField_name() {
		return field_name;
	}

	public void setField_name(String sParameter) {
		field_name = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'field_label'
	public String getField_label() {
		return field_label;
	}

	public void setField_label(String sParameter) {
		field_label = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'field_label_en'
	public String getField_label_en() {
		return field_label_en;
	}

	public void setField_label_en(String sParameter) {
		field_label_en = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'field_description'
	public String getField_description() {
		return field_description;
	}

	public void setField_description(String sParameter) {
		field_description = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'field_description_en'
	public String getField_description_en() {
		return field_description_en;
	}

	public void setField_description_en(String sParameter) {
		field_description_en = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'field_date'
	public String getField_date() {
		return field_date;
	}

	public void setField_date(String sParameter) {
		field_date = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'field_source'
	public String getField_source() {
		return field_source;
	}

	public void setField_source(String sParameter) {
		field_source = sParameter;
	}
//--------------------------------------------------------------------------------


	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// retrieves object info from HTML form fields
	//--------------------------------------------------------------------------------
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		setField_table(not_null(req.getParameter(assignName("field_table"))));
		setField_name(not_null(req.getParameter(assignName("field_name"))));
		setField_label(not_null(req.getParameter(assignName("field_label"))));
		setField_label_en(not_null(req.getParameter(assignName("field_label_en"))));
		setField_description(not_null(req.getParameter(assignName("field_description"))));
		setField_description_en(not_null(req.getParameter(assignName("field_description_en"))));
		setField_date(not_null(req.getParameter(assignName("field_date"))));
		setField_source(not_null(req.getParameter(assignName("field_source"))));

		updateHashTable();
		return 0;
	}

	//--------------------------------------------------------------------------------
	// loads an object from a record read from database
	//--------------------------------------------------------------------------------
	public void loadWebObject(ResultSet rset) {
		try {
			// SQL_LOAD

			try {
				field_table = not_null(rset.getString("field_table"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field field_table -->";
				System.out.println(ex.toString());
			}

			try {
				field_name = not_null(rset.getString("field_name"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field field_name -->";
				System.out.println(ex.toString());
			}

			try {
				field_label = not_null(rset.getString("field_label"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field field_label -->";
				System.out.println(ex.toString());
			}

			try {
				field_label_en = not_null(rset.getString("field_label_en"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field field_label_en -->";
				System.out.println(ex.toString());
			}

			try {
				field_description = not_null(rset.getString("field_description"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field field_description -->";
				System.out.println(ex.toString());
			}

			try {
				field_description_en = not_null(rset.getString("field_description_en"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field field_description_en -->";
				System.out.println(ex.toString());
			}

			try {
				field_date = not_null(rset.getString("field_date"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field field_date -->";
				System.out.println(ex.toString());
			}

			try {
				field_source = not_null(rset.getString("field_source"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field field_source -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	//--------------------------------------------------------------------------------
	// reads an object from the database
	//--------------------------------------------------------------------------------
	public int getWebObject(Connection con) {
		try {		
			// SQL_GET
			int f=1;
			sSql = "SELECT * FROM attribute_metadata";
			sSql += " WHERE (field_name = ?) AND (field_table = ?)";
			pstmt = con.prepareStatement(sSql);


			if (field_name==null || field_name.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, field_name);

			if (field_table==null || field_table.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, field_table);


			rset = pstmt.executeQuery();
			int nrows = 1;
			if (rset.next()) {
				loadWebObject(rset);
			}
			else {
				nrows = 0;
			}
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql
					+ " -->";
		}

		return -1;
	}

	//--------------------------------------------------------------------------------
	// adds a new object to the database
	//--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {
		try {
			// SQL_INSERT
			int f=1;
			sSql = "insert into attribute_metadata (";
			sSql += "field_table, field_name, field_label, field_label_en, field_description";
			sSql += ", field_description_en, field_date, field_source)";
			sSql += "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
			pstmt = con.prepareStatement(sSql);

			if (field_table==null || field_table.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, field_table);
			if (field_name==null || field_name.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, field_name);
			if (field_label==null || field_label.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, field_label);
			if (field_label_en==null || field_label_en.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, field_label_en);
			if (field_description==null || field_description.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, field_description);
			if (field_description_en==null || field_description_en.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, field_description_en);
			if (field_date==null || field_date.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, field_date);
			if (field_source==null || field_source.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, field_source);


			int nrows = pstmt.executeUpdate();
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			System.out.println("ERROR (adding web object): "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			return -1;
		}
	}

	//--------------------------------------------------------------------------------
	// updates an existing object in the database
	//--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
		try {
			// SQL_UPDATE
			int f=1;
			sSql = "UPDATE attribute_metadata SET ";
			sSql += "field_label = ?";
			sSql += ", field_label_en = ?";
			sSql += ", field_description = ?";
			sSql += ", field_description_en = ?";
			sSql += ", field_date = ?";
			sSql += ", field_source = ?";
			sSql += " WHERE (field_name = ?) AND (field_table = ?)";
			pstmt = con.prepareStatement(sSql);

			if (field_label==null || field_label.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, field_label);
			if (field_label_en==null || field_label_en.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, field_label_en);
			if (field_description==null || field_description.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, field_description);
			if (field_description_en==null || field_description_en.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, field_description_en);
			if (field_date==null || field_date.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, field_date);
			if (field_source==null || field_source.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, field_source);



			if (field_name==null || field_name.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, field_name);

			if (field_table==null || field_table.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, field_table);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
		}

		return -1;
	}

	//-------------------------------------------------------------------------------
	// deletes an existing object in the database
	//--------------------------------------------------------------------------------
	public int deleteWebObject(Connection con) {

		try {
			// SQL_DELETE
			int f=1;
			sSql = "DELETE FROM attribute_metadata";
			sSql += " WHERE (field_name = ?) AND (field_table = ?)";
			pstmt = con.prepareStatement(sSql);


			if (field_name==null || field_name.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, field_name);

			if (field_table==null || field_table.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, field_table);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
		}
		return -1;
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>field_table:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='field_table' VALUE="<%=beanName.field_table%>"></td></tr>
<tr><td>field_name:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='field_name' VALUE="<%=beanName.field_name%>"></td></tr>
<tr><td>field_label:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='field_label' VALUE="<%=beanName.field_label%>"></td></tr>
<tr><td>field_label_en:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='field_label_en' VALUE="<%=beanName.field_label_en%>"></td></tr>
<tr><td>field_description:</td><td>  <INPUT type='TEXT' size='50' maxlength='255' name='field_description' VALUE="<%=beanName.field_description%>"></td></tr>
<tr><td>field_description_en:</td><td>  <INPUT type='TEXT' size='50' maxlength='255' name='field_description_en' VALUE="<%=beanName.field_description_en%>"></td></tr>
<tr><td>field_date:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='field_date' VALUE="<%=beanName.field_date%>"></td></tr>
<tr><td>field_source:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='field_source' VALUE="<%=beanName.field_source%>"></td></tr>
</table>
END HTML TEMPLATE */
