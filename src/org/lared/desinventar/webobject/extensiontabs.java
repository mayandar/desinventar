//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;


//CLASS NAME
// generated by WebObjectGenerator...
public class extensiontabs extends webObject
{

	// DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
	public 	int      ntab;
	public 	int      nsort;
	public 	String svalue;
	public 	String svalue_en;

	//--------------------------------------------------------------------------------
	// creates a hash table with field values of the data members
	//--------------------------------------------------------------------------------

	public void updateHashTable() {
		// FIELD NAMES VECTOR
		asFieldNames.put("ntab", String.valueOf(ntab));
		asFieldNames.put("nsort", String.valueOf(nsort));
		asFieldNames.put("svalue", svalue);
		asFieldNames.put("svalue_en", svalue_en);

	}

	//--------------------------------------------------------------------------------
	// update data members with values stored in hash table
	//--------------------------------------------------------------------------------

	public void updateMembersFromHashTable() {
		// REVERSE FIELD NAMES VECTOR
		setNtab((String)asFieldNames.get("ntab"));
		setNsort((String)asFieldNames.get("nsort"));
		setSvalue((String)asFieldNames.get("svalue"));
		setSvalue_en((String)asFieldNames.get("svalue_en"));

	}
	
	//--------------------------------------------------------------------------------
	// constructor of the class. it initializes the object variables
	//--------------------------------------------------------------------------------

	// CONSTRUCTOR
	public void init() {
		lastError="No errors detected";
		ntab = 0;
		nsort = 0;
		svalue = "";
		svalue_en = "";
		updateHashTable();
	}

	public extensiontabs() {
		super("extensiontabs object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'ntab'
	public String getNtab() {
		return Integer.toString(ntab);
	}

	public void setNtab(String sParameter) {
		ntab = extendedParseInt(sParameter);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'nsort'
	public String getNsort() {
		return Integer.toString(nsort);
	}

	public void setNsort(String sParameter) {
		nsort = extendedParseInt(sParameter);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'svalue'
	public String getSvalue() {
		return svalue;
	}

	public void setSvalue(String sParameter) {
		svalue = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'svalue_en'
	public String getSvalue_en() {
		return svalue_en;
	}

	public void setSvalue_en(String sParameter) {
		svalue_en = sParameter;
	}
//--------------------------------------------------------------------------------


	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// retrieves object info from HTML form fields
	//--------------------------------------------------------------------------------
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		ntab = extendedParseInt(req.getParameter(assignName("ntab")));
		nsort = extendedParseInt(req.getParameter(assignName("nsort")));
		svalue = not_null(req.getParameter(assignName("svalue")));
		svalue_en = not_null(req.getParameter(assignName("svalue_en")));

		updateHashTable();
		return 0;
	}

	//--------------------------------------------------------------------------------
	// loads an object from a record read from database
	//--------------------------------------------------------------------------------
	public void loadWebObject(ResultSet rset) {
		try {
			// SQL_LOAD

			try {
				ntab = rset.getInt("ntab");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field ntab -->";
				System.out.println(ex.toString());
			}

			try {
				nsort = rset.getInt("nsort");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field nsort -->";
				System.out.println(ex.toString());
			}

			try {
				svalue = not_null(rset.getString("svalue"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field svalue -->";
				System.out.println(ex.toString());
			}

			try {
				svalue_en = not_null(rset.getString("svalue_en"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field svalue_en -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	//--------------------------------------------------------------------------------
	// reads an object from the database
	//--------------------------------------------------------------------------------
	public int getWebObject(Connection con) {
		try {		
			// SQL_GET
			int f=1;
			sSql = "SELECT * FROM extensiontabs";
			sSql += " WHERE (ntab = ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, ntab);


			rset = pstmt.executeQuery();
			int nrows = 1;
			if (rset.next()) {
				loadWebObject(rset);
			}
			else {
				nrows = 0;
			}
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql
					+ " -->";
		}

		return -1;
	}

	//--------------------------------------------------------------------------------
	// adds a new object to the database
	//--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {
		try {
			// SQL_INSERT
			int f=1;
			sSql = "insert into extensiontabs (";
			sSql += "ntab, nsort, svalue, svalue_en)";
			sSql += "VALUES (?, ?, ?, ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, ntab);
			pstmt.setInt(f++, nsort);

			if (svalue == null || svalue.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, svalue);

			if (svalue_en == null || svalue_en.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, svalue_en);


			int nrows = pstmt.executeUpdate();
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			System.out.println("ERROR (adding web object): "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			return -1;
		}
	}

	//--------------------------------------------------------------------------------
	// updates an existing object in the database
	//--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
		try {
			// SQL_UPDATE
			int f=1;
			sSql = "UPDATE extensiontabs SET ";
			sSql += "nsort = ?";
			sSql += ", svalue = ?";
			sSql += ", svalue_en = ?";
			sSql += " WHERE (ntab = ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, nsort);

			if (svalue == null || svalue.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, svalue);

			if (svalue_en == null || svalue_en.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, svalue_en);


			pstmt.setInt(f++, ntab);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
		}

		return -1;
	}

	//-------------------------------------------------------------------------------
	// deletes an existing object in the database
	//--------------------------------------------------------------------------------
	public int deleteWebObject(Connection con) {

		try {
			// SQL_DELETE
			int f=1;
			sSql = "DELETE FROM extensiontabs";
			sSql += " WHERE (ntab = ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, ntab);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
		}
		return -1;
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>ntab:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='ntab' VALUE="<%=beanName.ntab%>"></td></tr>
<tr><td>nsort:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='nsort' VALUE="<%=beanName.nsort%>"></td></tr>
<tr><td>svalue:</td><td>  <INPUT type='TEXT' size='41' maxlength='40' name='svalue' VALUE="<%=beanName.svalue%>"></td></tr>
<tr><td>svalue_en:</td><td>  <INPUT type='TEXT' size='41' maxlength='40' name='svalue_en' VALUE="<%=beanName.svalue_en%>"></td></tr>
</table>
END HTML TEMPLATE */
