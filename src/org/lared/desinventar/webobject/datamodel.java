//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import org.lared.desinventar.util.*;
import org.lared.desinventar.system.*;
import org.lared.desinventar.webobject.*;


//CLASS NAME
// generated by persistentObjectGenerator...
public class datamodel extends webObject
{
	// DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
     public   int      revision;
     public   int      build;
     public   String slanguage;

	//--------------------------------------------------------------------------------
	// creates a hash table with field values of the data members
	//--------------------------------------------------------------------------------

  public void updateHashTable()
  {
		// FIELD NAMES VECTOR
		asFieldNames.put("revision", String.valueOf(revision));
		asFieldNames.put("build", String.valueOf(build));
		asFieldNames.put("slanguage", slanguage);

	}

	//--------------------------------------------------------------------------------
	// update data members with values stored in hash table
	//--------------------------------------------------------------------------------

	public void updateMembersFromHashTable() {
		// REVERSE FIELD NAMES VECTOR
		setRevision((String)asFieldNames.get("revision"));
		setBuild((String)asFieldNames.get("build"));
		setSlanguage((String)asFieldNames.get("slanguage"));

	}

	//--------------------------------------------------------------------------------
	// constructor of the class. it initializes the object variables
	//--------------------------------------------------------------------------------

	// CONSTRUCTOR
	public void init()
	{
		lastError="No errors detected";
		revision = 0;
		build = 0;
		slanguage = "";
		updateHashTable();
	}

	public datamodel()
	{
		super("datamodel object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// METHODS FOR: revision
	public String getRevision()
	{
		return Integer.toString(revision);
	}

	public void setRevision(String sParameter)
	{
		revision = extendedParseInt(sParameter);
	}
// end of methods for Revision
//--------------------------------------------------------------------------------
// METHODS FOR: build
	public String getBuild()
	{
		return Integer.toString(build);
	}

	public void setBuild(String sParameter)
	{
		build = extendedParseInt(sParameter);
	}
// end of methods for Build
//--------------------------------------------------------------------------------
// METHODS FOR: slanguage
	public String getSlanguage()
	{
		return slanguage;
	}

	public void setSlanguage(String sParameter)
	{
		slanguage = sParameter;
	}
// end of methods for Slanguage

	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// retrieves object info from HTML form fields
	//--------------------------------------------------------------------------------
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		revision = extendedParseInt(req.getParameter(assignName("revision")));
		build = extendedParseInt(req.getParameter(assignName("build")));
		slanguage = not_null(req.getParameter(assignName("slanguage")));

		updateHashTable();
		return 0;
	}

	//--------------------------------------------------------------------------------
	// loads an object from a record read from database
	//--------------------------------------------------------------------------------
  public void loadWebObject(ResultSet rset)
    {
		try {
			// SQL_LOAD

			try {
				revision = rset.getInt("revision");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field revision -->";
				System.out.println(ex.toString());
			}

			try {
				build = rset.getInt("build");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field build -->";
				System.out.println(ex.toString());
			}

			try {
				slanguage = not_null(rset.getString("slanguage"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field slanguage -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	//--------------------------------------------------------------------------------
	// reads an object from the database
	//--------------------------------------------------------------------------------
  public int getWebObject(Connection con)
    {
		try {		
			// SQL_GET
			int f=1;
			sSql = "SELECT revision,build,slanguage FROM datamodel";
			sSql += " WHERE )";
			pstmt = con.prepareStatement(sSql);			rset = pstmt.executeQuery();
			int nrows = 1;
			if (rset.next())
				loadWebObject(rset);
			else
				nrows = 0;
			// releases the statement object
			rset.close();
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql
					+ " -->";
		}

		return -1;
	}

	//--------------------------------------------------------------------------------
	// adds a new object to the database
	//--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {
		try {
			// SQL_INSERT
			int f=1;
			sSql = "insert into datamodel (";
			sSql += "revision, build, slanguage)";
			sSql += "VALUES (?, ?, ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, revision);
			pstmt.setInt(f++, build);

			if (slanguage == null || slanguage.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, slanguage);


			int nrows = pstmt.executeUpdate();
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			System.out.println("ERROR (adding web object): "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			return -1;
		}
	}

	//--------------------------------------------------------------------------------
	// updates an existing object in the database
	//--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
		try {
			// SQL_UPDATE
			int f=1;
			sSql = "UPDATE datamodel SET ";
			sSql += "revision = ?";
			sSql += ", build = ?";
			sSql += ", slanguage = ?";
			sSql += " WHERE )";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, revision);
			pstmt.setInt(f++, build);

			if (slanguage == null || slanguage.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, slanguage);




			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
		}

		return -1;
	}

	//-------------------------------------------------------------------------------
	// deletes an existing object in the database
	//--------------------------------------------------------------------------------
	public int deleteWebObject(Connection con) {

		try {
			// SQL_DELETE
			int f=1;
			sSql = "DELETE FROM datamodel";
			sSql += " WHERE )";
			pstmt = con.prepareStatement(sSql);



			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
		}
		return -1;
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>revision:</td><td>  <INPUT type='TEXT' size='5' maxlength='11' name='revision' VALUE="<%=beanName.revision%>"></td></tr>
<tr><td>build:</td><td>  <INPUT type='TEXT' size='5' maxlength='11' name='build' VALUE="<%=beanName.build%>"></td></tr>
<tr><td>slanguage:</td><td>  <INPUT type='TEXT' size='11' maxlength='10' name='slanguage' VALUE="<%=beanName.slanguage%>"></td></tr>
</table>
END HTML TEMPLATE */
