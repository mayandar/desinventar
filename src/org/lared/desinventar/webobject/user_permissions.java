//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import org.lared.desinventar.util.*;
import org.lared.desinventar.system.*;
import org.lared.desinventar.webobject.*;


//CLASS NAME
// generated by persistentObjectGenerator...
public class user_permissions extends webObject
{
	// DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
     public   String userid;
     public   String country;

	//--------------------------------------------------------------------------------
	// creates a hash table with field values of the data members
	//--------------------------------------------------------------------------------

  public void updateHashTable()
  {
		// FIELD NAMES VECTOR
		asFieldNames.put("userid", userid);
		asFieldNames.put("country", country);

	}

	//--------------------------------------------------------------------------------
	// constructor of the class. it initializes the object variables
	//--------------------------------------------------------------------------------

	// CONSTRUCTOR
	public void init()
	{
		lastError="No errors detected";
		userid = "";
		country = "";
		updateHashTable();
	}

	public user_permissions()
	{
		super("user_permissions object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// METHODS FOR: userid
	public String getUserid()
	{
		return userid;
	}

	public void setUserid(String sParameter)
	{
		userid = sParameter;
	}
// end of methods for Userid
//--------------------------------------------------------------------------------
// METHODS FOR: country
	public String getCountry()
	{
		return country;
	}

	public void setCountry(String sParameter)
	{
		country = sParameter;
	}
// end of methods for Country

	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// retrieves object info from HTML form fields
	//--------------------------------------------------------------------------------
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		userid = not_null(req.getParameter(assignName("userid")));
		country = not_null(req.getParameter(assignName("country")));

		updateHashTable();
		return 0;
	}

	//--------------------------------------------------------------------------------
	// loads an object from a record read from database
	//--------------------------------------------------------------------------------
  public void loadWebObject(ResultSet rset)
    {
		try {
			// SQL_LOAD

			try {
				userid = not_null(rset.getString("userid"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field userid -->";
				System.out.println(ex.toString());
			}

			try {
				country = not_null(rset.getString("country"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field country -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	//--------------------------------------------------------------------------------
	// reads an object from the database
	//--------------------------------------------------------------------------------
  public int getWebObject(Connection con)
    {
		try {		
			// SQL_GET
			sSql = "SELECT * FROM user_permissions";
			sSql += " WHERE (country = ?) AND (userid = ?)";
			pstmt = con.prepareStatement(sSql);


			if (country == null || country.length() == 0)
				pstmt.setNull(1, Types.VARCHAR);
			else
				pstmt.setString(1, country);

			if (userid == null || userid.length() == 0)
				pstmt.setNull(2, Types.VARCHAR);
			else
				pstmt.setString(2, userid);			rset = pstmt.executeQuery();
			int nrows = 1;
			if (rset.next())
				loadWebObject(rset);
			else
				nrows = 0;
			// releases the statement object
			rset.close();
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql
					+ " -->";
		}

		return -1;
	}

	//--------------------------------------------------------------------------------
	// adds a new object to the database
	//--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {
		try {
			// SQL_INSERT
			sSql = "insert into user_permissions (";
			sSql += "userid, country)";
			sSql += " VALUES (?, ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setString(1, userid);
			pstmt.setString(2, country);


			int nrows = pstmt.executeUpdate();
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			System.out.println("ERROR (adding web object): "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			return -1;
		}
	}

	//--------------------------------------------------------------------------------
	// updates an existing object in the database
	//--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
		try {
			// SQL_UPDATE
			sSql = "UPDATE user_permissions SET ";
			sSql += " WHERE (country = ?) AND (userid = ?)";
			pstmt = con.prepareStatement(sSql);




			if (country == null || country.length() == 0)
				pstmt.setNull(1, Types.VARCHAR);
			else
				pstmt.setString(1, country);

			if (userid == null || userid.length() == 0)
				pstmt.setNull(2, Types.VARCHAR);
			else
				pstmt.setString(2, userid);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
		}

		return -1;
	}

	//-------------------------------------------------------------------------------
	// deletes an existing object in the database
	//--------------------------------------------------------------------------------
	public int deleteWebObject(Connection con) {

		try {
			// SQL_DELETE
			sSql = "DELETE FROM user_permissions";
			sSql += " WHERE (country = ?) AND (userid = ?)";
			pstmt = con.prepareStatement(sSql);


			if (country == null || country.length() == 0)
				pstmt.setNull(1, Types.VARCHAR);
			else
				pstmt.setString(1, country);

			if (userid == null || userid.length() == 0)
				pstmt.setNull(2, Types.VARCHAR);
			else
				pstmt.setString(2, userid);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
		}
		return -1;
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>userid:</td><td>  <INPUT type='TEXT' size='31' maxlength='30' name='userid' VALUE="<%=beanName.userid%>"></td></tr>
<tr><td>country:</td><td>  <INPUT type='TEXT' size='31' maxlength='30' name='country' VALUE="<%=beanName.country%>"></td></tr>
</table>
END HTML TEMPLATE */
