//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;


//CLASS NAME
// generated by WebObjectGenerator...
public class InfoMaps extends webObject
{

	// DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
	public 	String filename;
	public 	String layer_name;
	public 	String layer_name_en;
	public 	int      layer;
	public 	int      visible;
	public 	String   filetype;
	public 	int      color_red;
	public 	int      color_green;
	public 	int      color_blue;
	public 	int      line_thickness;
	public 	int      line_type;
	public 	int      projection_system;
	public 	int      projection_type;
	public 	String   projection_driver;
	public 	double   projection_par0;
	public 	double   projection_par1;
	public 	double   projection_par2;
	public 	double   projection_par3;
	public 	double   projection_par4;
	public 	double   projection_par5;
	public 	double   projection_par6;
	public 	double   projection_par7;
	public 	double   projection_par8;
	public 	double   projection_par9;

	//--------------------------------------------------------------------------------
	// creates a hash table with field values of the data members
	//--------------------------------------------------------------------------------

	public void updateHashTable() {
		// FIELD NAMES VECTOR
		asFieldNames.put("filename", filename);
		asFieldNames.put("layer_name", layer_name);
		asFieldNames.put("layer_name_en", layer_name_en);
		asFieldNames.put("layer", String.valueOf(layer));
		asFieldNames.put("visible", String.valueOf(visible));
		asFieldNames.put("filetype", filetype);
		asFieldNames.put("color_red", String.valueOf(color_red));
		asFieldNames.put("color_green", String.valueOf(color_green));
		asFieldNames.put("color_blue", String.valueOf(color_blue));
		asFieldNames.put("line_thickness", String.valueOf(line_thickness));
		asFieldNames.put("line_type", String.valueOf(line_type));
		asFieldNames.put("projection_system", String.valueOf(projection_system));
		asFieldNames.put("projection_type", String.valueOf(projection_type));
		asFieldNames.put("projection_driver", projection_driver);
		asFieldNames.put("projection_par0", String.valueOf(projection_par0));
		asFieldNames.put("projection_par1", String.valueOf(projection_par1));
		asFieldNames.put("projection_par2", String.valueOf(projection_par2));
		asFieldNames.put("projection_par3", String.valueOf(projection_par3));
		asFieldNames.put("projection_par4", String.valueOf(projection_par4));
		asFieldNames.put("projection_par5", String.valueOf(projection_par5));
		asFieldNames.put("projection_par6", String.valueOf(projection_par6));
		asFieldNames.put("projection_par7", String.valueOf(projection_par7));
		asFieldNames.put("projection_par8", String.valueOf(projection_par8));
		asFieldNames.put("projection_par9", String.valueOf(projection_par9));

	}

	//--------------------------------------------------------------------------------
	// update data members with values stored in hash table
	//--------------------------------------------------------------------------------

	public void updateMembersFromHashTable() {
		// REVERSE FIELD NAMES VECTOR
		setFilename((String)asFieldNames.get("filename"));
		setLayer_name((String)asFieldNames.get("layer_name"));
		setLayer_name_en((String)asFieldNames.get("layer_name_en"));
		setLayer((String)asFieldNames.get("layer"));
		setVisible((String)asFieldNames.get("visible"));
		setFiletype((String)asFieldNames.get("filetype"));
		setColor_red((String)asFieldNames.get("color_red"));
		setColor_green((String)asFieldNames.get("color_green"));
		setColor_blue((String)asFieldNames.get("color_blue"));
		setLine_thickness((String)asFieldNames.get("line_thickness"));
		setLine_type((String)asFieldNames.get("line_type"));
		setProjection_system((String)asFieldNames.get("projection_system"));
		setProjection_type((String)asFieldNames.get("projection_type"));
		setProjection_driver((String)asFieldNames.get("projection_driver"));
		setProjection_par0((String)asFieldNames.get("projection_par0"));
		setProjection_par1((String)asFieldNames.get("projection_par1"));
		setProjection_par2((String)asFieldNames.get("projection_par2"));
		setProjection_par3((String)asFieldNames.get("projection_par3"));
		setProjection_par4((String)asFieldNames.get("projection_par4"));
		setProjection_par5((String)asFieldNames.get("projection_par5"));
		setProjection_par6((String)asFieldNames.get("projection_par6"));
		setProjection_par7((String)asFieldNames.get("projection_par7"));
		setProjection_par8((String)asFieldNames.get("projection_par8"));
		setProjection_par9((String)asFieldNames.get("projection_par9"));

	}
	//--------------------------------------------------------------------------------
	// constructor of the class. it initializes the object variables
	//--------------------------------------------------------------------------------

	// CONSTRUCTOR
	public void init() {
		lastError="No errors detected";
		filename = "";
		layer_name = "";
		layer_name_en = "";
		fieldNullState.put("layer", new Boolean(true));
		layer = 0;
		fieldNullState.put("visible", new Boolean(true));
		visible = 0;
		filetype = "";
		fieldNullState.put("color_red", new Boolean(true));
		color_red = 0;
		fieldNullState.put("color_green", new Boolean(true));
		color_green = 0;
		fieldNullState.put("color_blue", new Boolean(true));
		color_blue = 0;
		fieldNullState.put("line_thickness", new Boolean(true));
		line_thickness = 0;
		fieldNullState.put("line_type", new Boolean(true));
		line_type = 0;
		fieldNullState.put("projection_system", new Boolean(true));
		projection_system = 0;
		fieldNullState.put("projection_type", new Boolean(true));
		projection_type = 0;
		projection_driver = "";
		fieldNullState.put("projection_par0", new Boolean(true));
		projection_par0 = 0;
		fieldNullState.put("projection_par1", new Boolean(true));
		projection_par1 = 0;
		fieldNullState.put("projection_par2", new Boolean(true));
		projection_par2 = 0;
		fieldNullState.put("projection_par3", new Boolean(true));
		projection_par3 = 0;
		fieldNullState.put("projection_par4", new Boolean(true));
		projection_par4 = 0;
		fieldNullState.put("projection_par5", new Boolean(true));
		projection_par5 = 0;
		fieldNullState.put("projection_par6", new Boolean(true));
		projection_par6 = 0;
		fieldNullState.put("projection_par7", new Boolean(true));
		projection_par7 = 0;
		fieldNullState.put("projection_par8", new Boolean(true));
		projection_par8 = 0;
		fieldNullState.put("projection_par9", new Boolean(true));
		projection_par9 = 0;
		updateHashTable();
	}

	public InfoMaps() {
		super("InfoMaps object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'filename'
	public String getFilename() {
		return filename;
	}

	public void setFilename(String sParameter) {
		filename = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'layer_name'
	public String getLayer_name() {
		return layer_name;
	}

	public void setLayer_name(String sParameter) {
		layer_name = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'layer_name_en'
	public String getLayer_name_en() {
		return layer_name_en;
	}

	public void setLayer_name_en(String sParameter) {
		layer_name_en = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'layer'
	public String getLayer() {
		return Integer.toString(layer);
	}

	public void setLayer(String sParameter) {
		layer = extendedParseInt(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("layer", false);
		}
	}

	public void setLayer(int sParameter) {
		layer = sParameter;
		fieldNullState.put("layer", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'visible'
	public String getVisible() {
		return Integer.toString(visible);
	}

	public void setVisible(String sParameter) {
		visible = extendedParseInt(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("visible", false);
		}
	}

	public void setVisible(int sParameter) {
		visible = sParameter;
		fieldNullState.put("visible", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'filetype'
	public String getFiletype() {
		return filetype;
	}

	public void setFiletype(String sParameter) {
		filetype = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'color_red'
	public String getColor_red() {
		return Integer.toString(color_red);
	}

	public void setColor_red(String sParameter) {
		color_red = extendedParseInt(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("color_red", false);
		}
	}

	public void setColor_red(int sParameter) {
		color_red = sParameter;
		fieldNullState.put("color_red", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'color_green'
	public String getColor_green() {
		return Integer.toString(color_green);
	}

	public void setColor_green(String sParameter) {
		color_green = extendedParseInt(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("color_green", false);
		}
	}

	public void setColor_green(int sParameter) {
		color_green = sParameter;
		fieldNullState.put("color_green", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'color_blue'
	public String getColor_blue() {
		return Integer.toString(color_blue);
	}

	public void setColor_blue(String sParameter) {
		color_blue = extendedParseInt(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("color_blue", false);
		}
	}

	public void setColor_blue(int sParameter) {
		color_blue = sParameter;
		fieldNullState.put("color_blue", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'line_thickness'
	public String getLine_thickness() {
		return Integer.toString(line_thickness);
	}

	public void setLine_thickness(String sParameter) {
		line_thickness = extendedParseInt(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("line_thickness", false);
		}
	}

	public void setLine_thickness(int sParameter) {
		line_thickness = sParameter;
		fieldNullState.put("line_thickness", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'line_type'
	public String getLine_type() {
		return Integer.toString(line_type);
	}

	public void setLine_type(String sParameter) {
		line_type = extendedParseInt(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("line_type", false);
		}
	}

	public void setLine_type(int sParameter) {
		line_type = sParameter;
		fieldNullState.put("line_type", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_system'
	public String getProjection_system() {
		return Integer.toString(projection_system);
	}

	public void setProjection_system(String sParameter) {
		projection_system = extendedParseInt(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_system", false);
		}
	}

	public void setProjection_system(int sParameter) {
		projection_system = sParameter;
		fieldNullState.put("projection_system", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_type'
	public String getProjection_type() {
		return Integer.toString(projection_type);
	}

	public void setProjection_type(String sParameter) {
		projection_type = extendedParseInt(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_type", false);
		}
	}

	public void setProjection_type(int sParameter) {
		projection_type = sParameter;
		fieldNullState.put("projection_type", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_driver'
	public String getProjection_driver() {
		return projection_driver;
	}

	public void setProjection_driver(String sParameter) {
		projection_driver = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par0'
	public String getProjection_par0() {
		return Double.toString(projection_par0);
	}

	public void setProjection_par0(String sParameter) {
		projection_par0 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par0", false);
		}
	}

	public void setProjection_par0(double sParameter) {
		projection_par0 = sParameter;
		fieldNullState.put("projection_par0", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par1'
	public String getProjection_par1() {
		return Double.toString(projection_par1);
	}

	public void setProjection_par1(String sParameter) {
		projection_par1 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par1", false);
		}
	}

	public void setProjection_par1(double sParameter) {
		projection_par1 = sParameter;
		fieldNullState.put("projection_par1", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par2'
	public String getProjection_par2() {
		return Double.toString(projection_par2);
	}

	public void setProjection_par2(String sParameter) {
		projection_par2 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par2", false);
		}
	}

	public void setProjection_par2(double sParameter) {
		projection_par2 = sParameter;
		fieldNullState.put("projection_par2", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par3'
	public String getProjection_par3() {
		return Double.toString(projection_par3);
	}

	public void setProjection_par3(String sParameter) {
		projection_par3 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par3", false);
		}
	}

	public void setProjection_par3(double sParameter) {
		projection_par3 = sParameter;
		fieldNullState.put("projection_par3", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par4'
	public String getProjection_par4() {
		return Double.toString(projection_par4);
	}

	public void setProjection_par4(String sParameter) {
		projection_par4 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par4", false);
		}
	}

	public void setProjection_par4(double sParameter) {
		projection_par4 = sParameter;
		fieldNullState.put("projection_par4", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par5'
	public String getProjection_par5() {
		return Double.toString(projection_par5);
	}

	public void setProjection_par5(String sParameter) {
		projection_par5 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par5", false);
		}
	}

	public void setProjection_par5(double sParameter) {
		projection_par5 = sParameter;
		fieldNullState.put("projection_par5", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par6'
	public String getProjection_par6() {
		return Double.toString(projection_par6);
	}

	public void setProjection_par6(String sParameter) {
		projection_par6 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par6", false);
		}
	}

	public void setProjection_par6(double sParameter) {
		projection_par6 = sParameter;
		fieldNullState.put("projection_par6", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par7'
	public String getProjection_par7() {
		return Double.toString(projection_par7);
	}

	public void setProjection_par7(String sParameter) {
		projection_par7 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par7", false);
		}
	}

	public void setProjection_par7(double sParameter) {
		projection_par7 = sParameter;
		fieldNullState.put("projection_par7", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par8'
	public String getProjection_par8() {
		return Double.toString(projection_par8);
	}

	public void setProjection_par8(String sParameter) {
		projection_par8 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par8", false);
		}
	}

	public void setProjection_par8(double sParameter) {
		projection_par8 = sParameter;
		fieldNullState.put("projection_par8", false);
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'projection_par9'
	public String getProjection_par9() {
		return Double.toString(projection_par9);
	}

	public void setProjection_par9(String sParameter) {
		projection_par9 = extendedParseDouble(sParameter);
		if (not_null(sParameter).length()>0) {
			fieldNullState.put("projection_par9", false);
		}
	}

	public void setProjection_par9(double sParameter) {
		projection_par9 = sParameter;
		fieldNullState.put("projection_par9", false);
	}
//--------------------------------------------------------------------------------


	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// retrieves object info from HTML form fields
	//--------------------------------------------------------------------------------
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		setFilename(not_null(req.getParameter(assignName("filename"))));
		setLayer_name(not_null(req.getParameter(assignName("layer_name"))));
		setLayer_name_en(not_null(req.getParameter(assignName("layer_name_en"))));
		setLayer(req.getParameter(assignName("layer")));
		setVisible(req.getParameter(assignName("visible")));
		setFiletype(not_null(req.getParameter(assignName("filetype"))));
		setColor_red(req.getParameter(assignName("color_red")));
		setColor_green(req.getParameter(assignName("color_green")));
		setColor_blue(req.getParameter(assignName("color_blue")));
		setLine_thickness(req.getParameter(assignName("line_thickness")));
		setLine_type(req.getParameter(assignName("line_type")));
		setProjection_system(req.getParameter(assignName("projection_system")));
		setProjection_type(req.getParameter(assignName("projection_type")));
		setProjection_driver(not_null(req.getParameter(assignName("projection_driver"))));
		setProjection_par0(req.getParameter(assignName("projection_par0")));
		setProjection_par1(req.getParameter(assignName("projection_par1")));
		setProjection_par2(req.getParameter(assignName("projection_par2")));
		setProjection_par3(req.getParameter(assignName("projection_par3")));
		setProjection_par4(req.getParameter(assignName("projection_par4")));
		setProjection_par5(req.getParameter(assignName("projection_par5")));
		setProjection_par6(req.getParameter(assignName("projection_par6")));
		setProjection_par7(req.getParameter(assignName("projection_par7")));
		setProjection_par8(req.getParameter(assignName("projection_par8")));
		setProjection_par9(req.getParameter(assignName("projection_par9")));

		updateHashTable();
		return 0;
	}

	//--------------------------------------------------------------------------------
	// loads an object from a record read from database
	//--------------------------------------------------------------------------------
	public void loadWebObject(ResultSet rset) {
		try {
			// SQL_LOAD

			try {
				filename = not_null(rset.getString("filename"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field filename -->";
				System.out.println(ex.toString());
			}

			try {
				layer_name = not_null(rset.getString("layer_name"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field layer_name -->";
				System.out.println(ex.toString());
			}

			try {
				layer_name_en = not_null(rset.getString("layer_name_en"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field layer_name_en -->";
				System.out.println(ex.toString());
			}

			try {
				layer = rset.getInt("layer");

				fieldNullState.put("layer", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field layer -->";
				System.out.println(ex.toString());
			}

			try {
				visible = rset.getInt("visible");

				fieldNullState.put("visible", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field visible -->";
				System.out.println(ex.toString());
			}

			try {
				filetype = not_null(rset.getString("filetype"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field filetype -->";
				System.out.println(ex.toString());
			}

			try {
				color_red = rset.getInt("color_red");

				fieldNullState.put("color_red", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field color_red -->";
				System.out.println(ex.toString());
			}

			try {
				color_green = rset.getInt("color_green");

				fieldNullState.put("color_green", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field color_green -->";
				System.out.println(ex.toString());
			}

			try {
				color_blue = rset.getInt("color_blue");

				fieldNullState.put("color_blue", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field color_blue -->";
				System.out.println(ex.toString());
			}

			try {
				line_thickness = rset.getInt("line_thickness");

				fieldNullState.put("line_thickness", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field line_thickness -->";
				System.out.println(ex.toString());
			}

			try {
				line_type = rset.getInt("line_type");

				fieldNullState.put("line_type", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field line_type -->";
				System.out.println(ex.toString());
			}

			try {
				projection_system = rset.getInt("projection_system");

				fieldNullState.put("projection_system", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_system -->";
				System.out.println(ex.toString());
			}

			try {
				projection_type = rset.getInt("projection_type");

				fieldNullState.put("projection_type", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_type -->";
				System.out.println(ex.toString());
			}

			try {
				projection_driver = not_null(rset.getString("projection_driver"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_driver -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par0 = rset.getDouble("projection_par0");

				fieldNullState.put("projection_par0", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par0 -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par1 = rset.getDouble("projection_par1");

				fieldNullState.put("projection_par1", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par1 -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par2 = rset.getDouble("projection_par2");

				fieldNullState.put("projection_par2", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par2 -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par3 = rset.getDouble("projection_par3");

				fieldNullState.put("projection_par3", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par3 -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par4 = rset.getDouble("projection_par4");

				fieldNullState.put("projection_par4", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par4 -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par5 = rset.getDouble("projection_par5");

				fieldNullState.put("projection_par5", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par5 -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par6 = rset.getDouble("projection_par6");

				fieldNullState.put("projection_par6", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par6 -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par7 = rset.getDouble("projection_par7");

				fieldNullState.put("projection_par7", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par7 -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par8 = rset.getDouble("projection_par8");

				fieldNullState.put("projection_par8", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par8 -->";
				System.out.println(ex.toString());
			}

			try {
				projection_par9 = rset.getDouble("projection_par9");

				fieldNullState.put("projection_par9", new Boolean(rset.wasNull()));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field projection_par9 -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	//--------------------------------------------------------------------------------
	// reads an object from the database
	//--------------------------------------------------------------------------------
	public int getWebObject(Connection con) {
		try {		
			// SQL_GET
			int f=1;
			sSql = "SELECT * FROM info_maps";
			sSql += " WHERE (filename = ?)";
			pstmt = con.prepareStatement(sSql);


			if (filename==null || filename.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, filename);


			rset = pstmt.executeQuery();
			int nrows = 1;
			if (rset.next()) {
				loadWebObject(rset);
			}
			else {
				nrows = 0;
			}
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql
					+ " -->";
		}

		return -1;
	}

	//--------------------------------------------------------------------------------
	// adds a new object to the database
	//--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {
		try {
			// SQL_INSERT
			int f=1;
			sSql = "insert into info_maps (";
			sSql += "filename, layer_name, layer_name_en, layer, visible, filetype";
			sSql += ", color_red, color_green, color_blue, line_thickness, line_type, projection_system";
			sSql += ", projection_type, projection_driver, projection_par0, projection_par1, projection_par2";
			sSql += ", projection_par3, projection_par4, projection_par5, projection_par6, projection_par7";
			sSql += ", projection_par8, projection_par9)";
			sSql += "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			pstmt = con.prepareStatement(sSql);

			if (filename==null || filename.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, filename);
			if (layer_name==null || layer_name.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, layer_name);
			if (layer_name_en==null || layer_name_en.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, layer_name_en);
			pstmt.setInt(f++, layer);
			pstmt.setInt(f++, visible);
			if (filetype==null || filetype.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, filetype);
			pstmt.setInt(f++, color_red);
			pstmt.setInt(f++, color_green);
			pstmt.setInt(f++, color_blue);
			pstmt.setInt(f++, line_thickness);
			pstmt.setInt(f++, line_type);
			pstmt.setInt(f++, projection_system);
			pstmt.setInt(f++, projection_type);
			if (projection_driver==null || projection_driver.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, projection_driver);
			pstmt.setDouble(f++, projection_par0);
			pstmt.setDouble(f++, projection_par1);
			pstmt.setDouble(f++, projection_par2);
			pstmt.setDouble(f++, projection_par3);
			pstmt.setDouble(f++, projection_par4);
			pstmt.setDouble(f++, projection_par5);
			pstmt.setDouble(f++, projection_par6);
			pstmt.setDouble(f++, projection_par7);
			pstmt.setDouble(f++, projection_par8);
			pstmt.setDouble(f++, projection_par9);


			int nrows = pstmt.executeUpdate();
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			System.out.println("ERROR (adding web object): "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			return -1;
		}
	}

	//--------------------------------------------------------------------------------
	// updates an existing object in the database
	//--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
		try {
			// SQL_UPDATE
			int f=1;
			sSql = "UPDATE info_maps SET ";
			sSql += "layer_name = ?";
			sSql += ", layer_name_en = ?";
			sSql += ", layer = ?";
			sSql += ", visible = ?";
			sSql += ", filetype = ?";
			sSql += ", color_red = ?";
			sSql += ", color_green = ?";
			sSql += ", color_blue = ?";
			sSql += ", line_thickness = ?";
			sSql += ", line_type = ?";
			sSql += ", projection_system = ?";
			sSql += ", projection_type = ?";
			sSql += ", projection_driver = ?";
			sSql += ", projection_par0 = ?";
			sSql += ", projection_par1 = ?";
			sSql += ", projection_par2 = ?";
			sSql += ", projection_par3 = ?";
			sSql += ", projection_par4 = ?";
			sSql += ", projection_par5 = ?";
			sSql += ", projection_par6 = ?";
			sSql += ", projection_par7 = ?";
			sSql += ", projection_par8 = ?";
			sSql += ", projection_par9 = ?";
			sSql += " WHERE (filename = ?)";
			pstmt = con.prepareStatement(sSql);

			if (layer_name==null || layer_name.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, layer_name);
			if (layer_name_en==null || layer_name_en.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, layer_name_en);
			if (layer==0 && (Boolean)fieldNullState.get("layer")) 
				pstmt.setNull(f++, java.sql.Types.INTEGER);
			else 
				pstmt.setInt(f++, layer);
			if (visible==0 && (Boolean)fieldNullState.get("visible")) 
				pstmt.setNull(f++, java.sql.Types.INTEGER);
			else 
				pstmt.setInt(f++, visible);
			if (filetype==null || filetype.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, filetype);
			if (color_red==0 && (Boolean)fieldNullState.get("color_red")) 
				pstmt.setNull(f++, java.sql.Types.INTEGER);
			else 
				pstmt.setInt(f++, color_red);
			if (color_green==0 && (Boolean)fieldNullState.get("color_green")) 
				pstmt.setNull(f++, java.sql.Types.INTEGER);
			else 
				pstmt.setInt(f++, color_green);
			if (color_blue==0 && (Boolean)fieldNullState.get("color_blue")) 
				pstmt.setNull(f++, java.sql.Types.INTEGER);
			else 
				pstmt.setInt(f++, color_blue);
			if (line_thickness==0 && (Boolean)fieldNullState.get("line_thickness")) 
				pstmt.setNull(f++, java.sql.Types.INTEGER);
			else 
				pstmt.setInt(f++, line_thickness);
			if (line_type==0 && (Boolean)fieldNullState.get("line_type")) 
				pstmt.setNull(f++, java.sql.Types.INTEGER);
			else 
				pstmt.setInt(f++, line_type);
			if (projection_system==0 && (Boolean)fieldNullState.get("projection_system")) 
				pstmt.setNull(f++, java.sql.Types.INTEGER);
			else 
				pstmt.setInt(f++, projection_system);
			if (projection_type==0 && (Boolean)fieldNullState.get("projection_type")) 
				pstmt.setNull(f++, java.sql.Types.INTEGER);
			else 
				pstmt.setInt(f++, projection_type);
			if (projection_driver==null || projection_driver.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, projection_driver);
			if (projection_par0==0.0 && (Boolean)fieldNullState.get("projection_par0")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par0);
			if (projection_par1==0.0 && (Boolean)fieldNullState.get("projection_par1")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par1);
			if (projection_par2==0.0 && (Boolean)fieldNullState.get("projection_par2")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par2);
			if (projection_par3==0.0 && (Boolean)fieldNullState.get("projection_par3")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par3);
			if (projection_par4==0.0 && (Boolean)fieldNullState.get("projection_par4")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par4);
			if (projection_par5==0.0 && (Boolean)fieldNullState.get("projection_par5")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par5);
			if (projection_par6==0.0 && (Boolean)fieldNullState.get("projection_par6")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par6);
			if (projection_par7==0.0 && (Boolean)fieldNullState.get("projection_par7")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par7);
			if (projection_par8==0.0 && (Boolean)fieldNullState.get("projection_par8")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par8);
			if (projection_par9==0.0 && (Boolean)fieldNullState.get("projection_par9")) 
				pstmt.setNull(f++, java.sql.Types.DECIMAL);
			else 
				pstmt.setDouble(f++, projection_par9);



			if (filename==null || filename.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, filename);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
		}

		return -1;
	}

	//-------------------------------------------------------------------------------
	// deletes an existing object in the database
	//--------------------------------------------------------------------------------
	public int deleteWebObject(Connection con) {

		try {
			// SQL_DELETE
			int f=1;
			sSql = "DELETE FROM info_maps";
			sSql += " WHERE (filename = ?)";
			pstmt = con.prepareStatement(sSql);


			if (filename==null || filename.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, filename);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
		}
		return -1;
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>filename:</td><td>  <INPUT type='TEXT' size='50' maxlength='255' name='filename' VALUE="<%=beanName.filename%>"></td></tr>
<tr><td>layer_name:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='layer_name' VALUE="<%=beanName.layer_name%>"></td></tr>
<tr><td>layer_name_en:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='layer_name_en' VALUE="<%=beanName.layer_name_en%>"></td></tr>
<tr><td>layer:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='layer' VALUE="<%=beanName.layer%>"></td></tr>
<tr><td>visible:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='visible' VALUE="<%=beanName.visible%>"></td></tr>
<tr><td>filetype:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='filetype' VALUE="<%=beanName.filetype%>"></td></tr>
<tr><td>color_red:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='color_red' VALUE="<%=beanName.color_red%>"></td></tr>
<tr><td>color_green:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='color_green' VALUE="<%=beanName.color_green%>"></td></tr>
<tr><td>color_blue:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='color_blue' VALUE="<%=beanName.color_blue%>"></td></tr>
<tr><td>line_thickness:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='line_thickness' VALUE="<%=beanName.line_thickness%>"></td></tr>
<tr><td>line_type:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='line_type' VALUE="<%=beanName.line_type%>"></td></tr>
<tr><td>projection_system:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='projection_system' VALUE="<%=beanName.projection_system%>"></td></tr>
<tr><td>projection_type:</td><td>  <INPUT type='TEXT' size='5' maxlength='22' name='projection_type' VALUE="<%=beanName.projection_type%>"></td></tr>
<tr><td>projection_driver:</td><td>  <INPUT type='TEXT' size='50' maxlength='255' name='projection_driver' VALUE="<%=beanName.projection_driver%>"></td></tr>
<tr><td>projection_par0:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par0' VALUE="<%=beanName.projection_par0%>"></td></tr>
<tr><td>projection_par1:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par1' VALUE="<%=beanName.projection_par1%>"></td></tr>
<tr><td>projection_par2:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par2' VALUE="<%=beanName.projection_par2%>"></td></tr>
<tr><td>projection_par3:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par3' VALUE="<%=beanName.projection_par3%>"></td></tr>
<tr><td>projection_par4:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par4' VALUE="<%=beanName.projection_par4%>"></td></tr>
<tr><td>projection_par5:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par5' VALUE="<%=beanName.projection_par5%>"></td></tr>
<tr><td>projection_par6:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par6' VALUE="<%=beanName.projection_par6%>"></td></tr>
<tr><td>projection_par7:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par7' VALUE="<%=beanName.projection_par7%>"></td></tr>
<tr><td>projection_par8:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par8' VALUE="<%=beanName.projection_par8%>"></td></tr>
<tr><td>projection_par9:</td><td>  <INPUT type='TEXT' size='15' maxlength='22' name='projection_par9' VALUE="<%=beanName.projection_par9%>"></td></tr>
</table>
END HTML TEMPLATE */
