//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import org.lared.desinventar.util.*;
import org.lared.desinventar.system.*;
import org.lared.desinventar.webobject.*;


//CLASS NAME
// generated by persistentObjectGenerator...
public class country extends webObject
{
    // DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
     public   String scountryid;
     public   String scountryname;
     public   String speriod;
     public   String slastupdated;
     public   String sdescriptiones;
     public   String sdescriptionen;
     public   String spagees;
     public   String spageen;
     public   int    bpublic;
     public   String sinstitution;
     public   String sdriver;
     public   String sdatabasename;
     public   String sodbcdriver;
     public   String sodbcdatabaseconnect;
     public   String sjetfilename;
     public   String susername;
     public   String spassword;
     public   int      ndbtype;

	//--------------------------------------------------------------------------------
	// creates a hash table with field values of the data members
	//--------------------------------------------------------------------------------

  public void updateHashTable()
  {
		// FIELD NAMES VECTOR
		asFieldNames.put("scountryid", scountryid);
		asFieldNames.put("scountryname", scountryname);
		asFieldNames.put("speriod", speriod);
		asFieldNames.put("slastupdated", slastupdated);
		asFieldNames.put("sdescriptiones", sdescriptiones);
		asFieldNames.put("sdescriptionen", sdescriptionen);
		asFieldNames.put("spagees", spagees);
		asFieldNames.put("spageen", spageen);
		asFieldNames.put("bpublic", String.valueOf(bpublic));
		asFieldNames.put("sinstitution", sinstitution);
		asFieldNames.put("sdriver", sdriver);
		asFieldNames.put("sdatabasename", sdatabasename);
		asFieldNames.put("sodbcdriver", sodbcdriver);
		asFieldNames.put("sodbcdatabaseconnect", sodbcdatabaseconnect);
		asFieldNames.put("sjetfilename", sjetfilename);
		asFieldNames.put("susername", susername);
		asFieldNames.put("spassword", spassword);
		asFieldNames.put("ndbtype", String.valueOf(ndbtype));

	}

	//--------------------------------------------------------------------------------
	// constructor of the class. it initializes the object variables
	//--------------------------------------------------------------------------------

	// CONSTRUCTOR
	public void init()
	{
		lastError="No errors detected";
		scountryid = "";
		scountryname = "";
		speriod = "";
		slastupdated = "";
		sdescriptiones = "";
		sdescriptionen = "";
		spagees = "";
		spageen = "";
		bpublic = 0;
		sinstitution = "";
		sdriver = "";
		sdatabasename = "";
		sodbcdriver = "";
		sodbcdatabaseconnect = "";
		sjetfilename = "";
		susername = "";
		spassword = "";
		ndbtype = 0;
		updateHashTable();
	}

	public country()
	{
		super("country object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// METHODS FOR: scountryid
	public String getScountryid()
	{
		return scountryid;
	}

	public void setScountryid(String sParameter)
	{
		scountryid = sParameter;
	}
// end of methods for Scountryid
//--------------------------------------------------------------------------------
// METHODS FOR: scountryname
	public String getScountryname()
	{
		return scountryname;
	}

	public void setScountryname(String sParameter)
	{
		scountryname = sParameter;
	}
// end of methods for Scountryname
//--------------------------------------------------------------------------------
// METHODS FOR: speriod
	public String getSperiod()
	{
		return speriod;
	}

	public void setSperiod(String sParameter)
	{
		speriod = sParameter;
	}
// end of methods for Speriod
//--------------------------------------------------------------------------------
// METHODS FOR: slastupdated
	public String getSlastupdated()
	{
		return slastupdated;
	}

	public void setSlastupdated(String sParameter)
	{
		slastupdated = sParameter;
	}
// end of methods for Slastupdated
//--------------------------------------------------------------------------------
// METHODS FOR: sdescriptiones
	public String getSdescriptiones()
	{
		return sdescriptiones;
	}

	public void setSdescriptiones(String sParameter)
	{
		sdescriptiones = sParameter;
	}
// end of methods for Sdescriptiones
//--------------------------------------------------------------------------------
// METHODS FOR: sdescriptionen
	public String getSdescriptionen()
	{
		return sdescriptionen;
	}

	public void setSdescriptionen(String sParameter)
	{
		sdescriptionen = sParameter;
	}
// end of methods for Sdescriptionen
//--------------------------------------------------------------------------------
// METHODS FOR: spagees
	public String getSpagees()
	{
		return spagees;
	}

	public void setSpagees(String sParameter)
	{
		spagees = sParameter;
	}
// end of methods for Spagees
//--------------------------------------------------------------------------------
// METHODS FOR: spageen
	public String getSpageen()
	{
		return spageen;
	}

	public void setSpageen(String sParameter)
	{
		spageen = sParameter;
	}
// end of methods for Spageen
//--------------------------------------------------------------------------------
// METHODS FOR: bpublic
	public String getBpublic()
	{
		return Integer.toString(bpublic);
	}

	public void setBpublic(String sParameter)
	{
		bpublic = extendedParseInt(sParameter);
	}
// end of methods for Bpublic
//--------------------------------------------------------------------------------
// METHODS FOR: sinstitution
	public String getSinstitution()
	{
		return sinstitution;
	}

	public void setSinstitution(String sParameter)
	{
		sinstitution = sParameter;
	}
// end of methods for Sinstitution
//--------------------------------------------------------------------------------
// METHODS FOR: sdriver
	public String getSdriver()
	{
		return sdriver;
	}

	public void setSdriver(String sParameter)
	{
		sdriver = sParameter;
	}
// end of methods for Sdriver
//--------------------------------------------------------------------------------
// METHODS FOR: sdatabasename
	public String getSdatabasename()
	{
		return sdatabasename;
	}

	public void setSdatabasename(String sParameter)
	{
		sdatabasename = sParameter;
	}
// end of methods for Sdatabasename
//--------------------------------------------------------------------------------
// METHODS FOR: sodbcdriver
	public String getSodbcdriver()
	{
		return sodbcdriver;
	}

	public void setSodbcdriver(String sParameter)
	{
		sodbcdriver = sParameter;
	}
// end of methods for Sodbcdriver
//--------------------------------------------------------------------------------
// METHODS FOR: sodbcdatabaseconnect
	public String getSodbcdatabaseconnect()
	{
		return sodbcdatabaseconnect;
	}

	public void setSodbcdatabaseconnect(String sParameter)
	{
		sodbcdatabaseconnect = sParameter;
	}
// end of methods for Sodbcdatabaseconnect
//--------------------------------------------------------------------------------
// METHODS FOR: sjetfilename
	public String getSjetfilename()
	{
		return sjetfilename;
	}

	public void setSjetfilename(String sParameter)
	{
		sjetfilename = sParameter;
	}
// end of methods for Sjetfilename
//--------------------------------------------------------------------------------
// METHODS FOR: susername
	public String getSusername()
	{
		return susername;
	}

	public void setSusername(String sParameter)
	{
		susername = sParameter;
	}
// end of methods for Susername
//--------------------------------------------------------------------------------
// METHODS FOR: spassword
	public String getSpassword()
	{
		return spassword;
	}

	public void setSpassword(String sParameter)
	{
		spassword = sParameter;
	}
// end of methods for Spassword
//--------------------------------------------------------------------------------
// METHODS FOR: ndbtype
	public String getNdbtype()
	{
		return Integer.toString(ndbtype);
	}

	public void setNdbtype(String sParameter)
	{
		ndbtype = extendedParseInt(sParameter);
	}
// end of methods for Ndbtype

	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// retrieves object info from HTML form fields
	//--------------------------------------------------------------------------------
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		scountryid = not_null(req.getParameter(assignName("scountryid")));
		scountryname = not_null(req.getParameter(assignName("scountryname")));
		speriod = not_null(req.getParameter(assignName("speriod")));
		slastupdated = not_null(req.getParameter(assignName("slastupdated")));
		sdescriptiones = not_null(req.getParameter(assignName("sdescriptiones")));
		sdescriptionen = not_null(req.getParameter(assignName("sdescriptionen")));
		spagees = not_null(req.getParameter(assignName("spagees")));
		spageen = not_null(req.getParameter(assignName("spageen")));
		bpublic = extendedParseInt(req.getParameter(assignName("bpublic")));
		sinstitution = not_null(req.getParameter(assignName("sinstitution")));
		sdriver = not_null(req.getParameter(assignName("sdriver")));
		sdatabasename = not_null(req.getParameter(assignName("sdatabasename")));
		sodbcdriver = not_null(req.getParameter(assignName("sodbcdriver")));
		sodbcdatabaseconnect = not_null(req.getParameter(assignName("sodbcdatabaseconnect")));
		sjetfilename = not_null(req.getParameter(assignName("sjetfilename")));
		susername = not_null(req.getParameter(assignName("susername")));
		spassword = not_null(req.getParameter(assignName("spassword")));
		ndbtype = extendedParseInt(req.getParameter(assignName("ndbtype")));

		updateHashTable();
		return 0;
	}

	//--------------------------------------------------------------------------------
	// loads an object from a record read from database
	//--------------------------------------------------------------------------------
  public void loadWebObject(ResultSet rset)
    {
		try {
			// SQL_LOAD

			try {
				scountryid = not_null(rset.getString("scountryid"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field scountryid -->";
				System.out.println(ex.toString());
			}

			try {
				scountryname = not_null(rset.getString("scountryname"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field scountryname -->";
				System.out.println(ex.toString());
			}

			try {
				speriod = not_null(rset.getString("speriod"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field speriod -->";
				System.out.println(ex.toString());
			}

			try {
				slastupdated = not_null(rset.getString("slastupdated"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field slastupdated -->";
				System.out.println(ex.toString());
			}

			try {
				sdescriptiones = not_null(rset.getString("sdescriptiones"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field sdescriptiones -->";
				System.out.println(ex.toString());
			}

			try {
				sdescriptionen = not_null(rset.getString("sdescriptionen"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field sdescriptionen -->";
				System.out.println(ex.toString());
			}

			try {
				spagees = not_null(rset.getString("spagees"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field spagees -->";
				System.out.println(ex.toString());
			}

			try {
				spageen = not_null(rset.getString("spageen"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field spageen -->";
				System.out.println(ex.toString());
			}

			try {
				bpublic = rset.getInt("bpublic");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field bpublic -->";
				System.out.println(ex.toString());
			}

			try {
				sinstitution = not_null(rset.getString("sinstitution"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field sinstitution -->";
				System.out.println(ex.toString());
			}

			try {
				sdriver = not_null(rset.getString("sdriver"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field sdriver -->";
				System.out.println(ex.toString());
			}

			try {
				sdatabasename = not_null(rset.getString("sdatabasename"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field sdatabasename -->";
				System.out.println(ex.toString());
			}

			try {
				sodbcdriver = not_null(rset.getString("sodbcdriver"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field sodbcdriver -->";
				System.out.println(ex.toString());
			}

			try {
				sodbcdatabaseconnect = not_null(rset.getString("sodbcdatabaseconnect"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field sodbcdatabaseconnect -->";
				System.out.println(ex.toString());
			}

			try {
				sjetfilename = not_null(rset.getString("sjetfilename"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field sjetfilename -->";
				System.out.println(ex.toString());
			}

			try {
				susername = not_null(rset.getString("susername"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field susername -->";
				System.out.println(ex.toString());
			}

			try {
				spassword = not_null(rset.getString("spassword"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field spassword -->";
				System.out.println(ex.toString());
			}

			try {
				ndbtype = rset.getInt("ndbtype");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field ndbtype -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	//--------------------------------------------------------------------------------
	// reads an object from the database
	//--------------------------------------------------------------------------------
  public int getWebObject(Connection con)
    {
		try {		
			// SQL_GET
			int f=1;
			sSql = "SELECT * FROM country";
			sSql += " WHERE (scountryid = ?)";
			pstmt = con.prepareStatement(sSql);


			if (scountryid == null || scountryid.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, scountryid);			rset = pstmt.executeQuery();
			int nrows = 1;
			if (rset.next())
				loadWebObject(rset);
			else
				nrows = 0;
			// releases the statement object
			rset.close();
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql
					+ " -->";
		}

		return -1;
	}

	//--------------------------------------------------------------------------------
	// adds a new object to the database
	//--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {
		try {
			// SQL_INSERT
			int f=1;
			sSql = "insert into country (";
			sSql += "scountryid, scountryname, speriod, slastupdated, sdescriptiones";
			sSql += ", sdescriptionen, spagees, spageen, bpublic, sinstitution, sdriver, sdatabasename";
			sSql += ", sodbcdriver, sodbcdatabaseconnect, sjetfilename, susername, spassword";
			sSql += ", ndbtype)";
			sSql += "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
			pstmt = con.prepareStatement(sSql);


			if (scountryid == null || scountryid.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, scountryid);

			if (scountryname == null || scountryname.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, scountryname);

			if (speriod == null || speriod.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, speriod);

			if (slastupdated == null || slastupdated.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, slastupdated);

			if (sdescriptiones == null || sdescriptiones.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sdescriptiones);

			if (sdescriptionen == null || sdescriptionen.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sdescriptionen);

			if (spagees == null || spagees.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, spagees);

			if (spageen == null || spageen.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, spageen);
			pstmt.setInt(f++, bpublic);

			if (sinstitution == null || sinstitution.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sinstitution);

			if (sdriver == null || sdriver.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sdriver);

			if (sdatabasename == null || sdatabasename.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sdatabasename);

			if (sodbcdriver == null || sodbcdriver.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sodbcdriver);

			if (sodbcdatabaseconnect == null || sodbcdatabaseconnect.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sodbcdatabaseconnect);

			if (sjetfilename == null || sjetfilename.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sjetfilename);

			if (susername == null || susername.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, susername);

			if (spassword == null || spassword.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, spassword);
			pstmt.setInt(f++, ndbtype);


			int nrows = pstmt.executeUpdate();
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			System.out.println("ERROR (adding web object): "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			return -1;
		}
	}

	//--------------------------------------------------------------------------------
	// updates an existing object in the database
	//--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
		try {
			// SQL_UPDATE
			int f=1;
			sSql = "UPDATE country SET ";
			sSql += "scountryname = ?";
			sSql += ", speriod = ?";
			sSql += ", slastupdated = ?";
			sSql += ", sdescriptiones = ?";
			sSql += ", sdescriptionen = ?";
			sSql += ", spagees = ?";
			sSql += ", spageen = ?";
			sSql += ", bpublic = ?";
			sSql += ", sinstitution = ?";
			sSql += ", sdriver = ?";
			sSql += ", sdatabasename = ?";
			sSql += ", sodbcdriver = ?";
			sSql += ", sodbcdatabaseconnect = ?";
			sSql += ", sjetfilename = ?";
			sSql += ", susername = ?";
			sSql += ", spassword = ?";
			sSql += ", ndbtype = ?";
			sSql += " WHERE (scountryid = ?)";
			pstmt = con.prepareStatement(sSql);


			if (scountryname == null || scountryname.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, scountryname);

			if (speriod == null || speriod.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, speriod);

			if (slastupdated == null || slastupdated.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, slastupdated);

			if (sdescriptiones == null || sdescriptiones.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sdescriptiones);

			if (sdescriptionen == null || sdescriptionen.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sdescriptionen);

			if (spagees == null || spagees.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, spagees);

			if (spageen == null || spageen.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, spageen);
			pstmt.setInt(f++, bpublic);

			if (sinstitution == null || sinstitution.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sinstitution);

			if (sdriver == null || sdriver.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sdriver);

			if (sdatabasename == null || sdatabasename.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sdatabasename);

			if (sodbcdriver == null || sodbcdriver.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sodbcdriver);

			if (sodbcdatabaseconnect == null || sodbcdatabaseconnect.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sodbcdatabaseconnect);

			if (sjetfilename == null || sjetfilename.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, sjetfilename);

			if (susername == null || susername.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, susername);

			if (spassword == null || spassword.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, spassword);
			pstmt.setInt(f++, ndbtype);



			if (scountryid == null || scountryid.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, scountryid);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
		}

		return -1;
	}

	//-------------------------------------------------------------------------------
	// deletes an existing object in the database
	//--------------------------------------------------------------------------------
	public int deleteWebObject(Connection con) {

		try {
			// SQL_DELETE
			int f=1;
			sSql = "DELETE FROM country";
			sSql += " WHERE (scountryid = ?)";
			pstmt = con.prepareStatement(sSql);


			if (scountryid == null || scountryid.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, scountryid);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
		}
		return -1;
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>scountryid:</td><td>  <INPUT type='TEXT' size='31' maxlength='30' name='scountryid' VALUE="<%=beanName.scountryid%>"></td></tr>
<tr><td>scountryname:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='scountryname' VALUE="<%=beanName.scountryname%>"></td></tr>
<tr><td>speriod:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='speriod' VALUE="<%=beanName.speriod%>"></td></tr>
<tr><td>slastupdated:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='slastupdated' VALUE="<%=beanName.slastupdated%>"></td></tr>
<tr><td>sdescriptiones:</td><td>  <INPUT type='TEXT' size='50' maxlength='2000' name='sdescriptiones' VALUE="<%=beanName.sdescriptiones%>"></td></tr>
<tr><td>sdescriptionen:</td><td>  <INPUT type='TEXT' size='50' maxlength='2000' name='sdescriptionen' VALUE="<%=beanName.sdescriptionen%>"></td></tr>
<tr><td>spagees:</td><td>  <INPUT type='TEXT' size='50' maxlength='250' name='spagees' VALUE="<%=beanName.spagees%>"></td></tr>
<tr><td>spageen:</td><td>  <INPUT type='TEXT' size='50' maxlength='250' name='spageen' VALUE="<%=beanName.spageen%>"></td></tr>
<tr><td>bpublic:</td><td>  <INPUT type='TEXT' size='5' maxlength='6' name='bpublic' VALUE="<%=beanName.bpublic%>"></td></tr>
<tr><td>sinstitution:</td><td>  <INPUT type='TEXT' size='50' maxlength='150' name='sinstitution' VALUE="<%=beanName.sinstitution%>"></td></tr>
<tr><td>sdriver:</td><td>  <INPUT type='TEXT' size='50' maxlength='150' name='sdriver' VALUE="<%=beanName.sdriver%>"></td></tr>
<tr><td>sdatabasename:</td><td>  <INPUT type='TEXT' size='50' maxlength='250' name='sdatabasename' VALUE="<%=beanName.sdatabasename%>"></td></tr>
<tr><td>sodbcdriver:</td><td>  <INPUT type='TEXT' size='50' maxlength='250' name='sodbcdriver' VALUE="<%=beanName.sodbcdriver%>"></td></tr>
<tr><td>sodbcdatabaseconnect:</td><td>  <INPUT type='TEXT' size='50' maxlength='250' name='sodbcdatabaseconnect' VALUE="<%=beanName.sodbcdatabaseconnect%>"></td></tr>
<tr><td>sjetfilename:</td><td>  <INPUT type='TEXT' size='50' maxlength='255' name='sjetfilename' VALUE="<%=beanName.sjetfilename%>"></td></tr>
<tr><td>susername:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='susername' VALUE="<%=beanName.susername%>"></td></tr>
<tr><td>spassword:</td><td>  <INPUT type='TEXT' size='50' maxlength='50' name='spassword' VALUE="<%=beanName.spassword%>"></td></tr>
<tr><td>ndbtype:</td><td>  <INPUT type='TEXT' size='5' maxlength='11' name='ndbtype' VALUE="<%=beanName.ndbtype%>"></td></tr>
</table>
END HTML TEMPLATE */
