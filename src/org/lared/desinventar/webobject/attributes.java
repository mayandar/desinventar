package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import org.lared.desinventar.util.*;
import org.lared.desinventar.system.*;
import org.lared.desinventar.webobject.*;

// Initially generated by webObjectGenerator, and HEAVILY customized.
// WARNING:  DO NOT RE-GENERATE THIS CLASS!!
public class attributes   extends webObject
{
  // this ArrayList will hold the extended fields
  public ArrayList vFields = new ArrayList();  // all fields (for reportss)
  public ArrayList nFields = new ArrayList();  // numeric fields (for stats, charts and thematic)

  // SQL metadata of the resultset 
  transient ResultSetMetaData meta;

  public static final int Types_Oracle_Date = 93; // this is what oracle returns instead of Types.Date
  public static final int Types_Oracle_CLOB = 1111; // this is what oracle returns instead of Types.CLOB?

  //--------------------------------------------------------------------------------
  // creates a hash table with field values of the data members
  //--------------------------------------------------------------------------------

  public void updateHashTable()
  {
    // FIELD NAMES ArrayList
    int nMaxFields = 1;


  }

  //--------------------------------------------------------------------------------
  // constructor of the class. it initializes the object variables
  //--------------------------------------------------------------------------------

  // CONSTRUCTOR
  public void init()
  {
    lastError = "NO errors detected";
    for (int j = 0; j < vFields.size(); j++)
        {
          ((Dictionary) vFields.get(j)).sValue="";
          ((Dictionary) vFields.get(j)).dNumericValue=0;
        }
    updateHashTable();
  }

  public void loadAttributes(Connection con, DICountry countrybean, int level)
  {
    int j = 0;
    lastError = "NO errors detected";
    vFields = new ArrayList();
    try
    {
      stmt = con.createStatement ();
      Statement stmt_d = con.createStatement ();

      // will always be an empty recset...
      sSql = "select * from "+countrybean.laAttrs[level].table_name.toLowerCase()+" where "+countrybean.laAttrs[level].table_code+"=''";
      rset = stmt.executeQuery(sSql);
      // gets the metadata of the resultset
      meta = rset.getMetaData();

      for (j = 1; j <= meta.getColumnCount(); j++)
      {
        // search by field name
        String sCol = meta.getColumnName(j);
        // adds the field to the ArrayList
        vFields.add(sCol);
        switch (meta.getColumnType(j))
        {
          case Types.DECIMAL:
          case Types.DOUBLE:
          case Types.FLOAT:
          case Types.NUMERIC:
          case Types.REAL:
          case Types.SMALLINT:
          case Types.INTEGER:
        	  nFields.add(sCol);
              break;
        }
      }

      rset.close();
      stmt.close();
    }
    catch (Exception e)
    {
      lastError = e.toString();
    }

    updateHashTable();
  }

  public attributes(int dataBaseType)
  {
    super("extension object");
    init();
    this.dbType=dataBaseType;
  }

  public attributes()
  {
    super("extension object");
    init();
  }


  //----------------------------------------------------------------
  // Operational methods any webObject must have. Abstract class
  // provides templates and default behaviour (return error)
  //----------------------------------------------------------------

  //--------------------------------------------------------------------------------
  // retrieves object info from HTML form fields
  //--------------------------------------------------------------------------------
  public int getForm(HttpServletRequest req,
                     HttpServletResponse resp,
                     Connection con)
  {

    // GET_FORM()
    updateHashTable();
    return 0;
  }

  //--------------------------------------------------------------------------------
  // loads an object from a record read from database
  //--------------------------------------------------------------------------------
  public void loadWebObject(ResultSet rset)
  {
    try
    {
      // SQL_LOAD

    }
    catch (Exception e)
    {
      lastError = "<!-Error loading WebObject: " + e.toString() + " : " + sSql + "-->";
    }
    updateHashTable();
  }

  //--------------------------------------------------------------------------------
  // reads an object from the database
  //--------------------------------------------------------------------------------
  public int getWebObject(Connection con)
  {
    try
    {
      // creates the statement handle
      stmt = con.createStatement ();
      sSql="select * from TABLENAME";  // TODO
      sSql=" where keey=;;xx";
      rset = stmt.executeQuery(sSql);
      int nrows = 1;
      if (rset.next())
        loadWebObject(rset);
      else
        nrows = 0;
        // releases the statement object
      stmt.close();
      lastError = ""; // "NO ERROR. sql="+sSql;
      return nrows;
    }
    catch (Exception ex)
    {
      //Trap and report SQL errors
      lastError = "<!-Error getting persistentObject: " + ex.toString() + " : " + sSql + "-->";
    }

    return -1;
  }

  
  public static void main(String[] args)
  {

    extension ext = new extension();

    dbConnection dbCon = null;
    Connection con = null;
    // now, get a connection to the database
    dbCon = new dbConnection("sun.jdbc.odbc.JdbcOdbcDriver", "jdbc:odbc:inventco", "", "");
    boolean bConnectionOK = dbCon.dbGetConnectionStatus();
    // continue if the database is available and ready
    if (bConnectionOK)
    {
      // Conexion OK!!, go and get the data..
      con = dbCon.dbGetConnection();
      ext.loadExtension(con, new DICountry());
    }

  }

}
/*   HTML TEMPLATE
 <table border=0 cellspacing=0 cellpadding=0>
 <tr><td>clave_ext:</td><td>  <INPUT type='TEXT' size='15' maxlength='21' name='clave_ext' VALUE="<%=beanName.clave_ext%>"></td></tr>
 </table>
 */