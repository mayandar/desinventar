//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import org.lared.desinventar.util.*;
import org.lared.desinventar.system.*;
import org.lared.desinventar.webobject.*;


//CLASS NAME
// generated by persistentObjectGenerator...
public class eventos extends webObject
{
    // DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
     public   int      serial;
     public   String nombre;
     public   String nombre_en;
     public   String descripcion;

	//--------------------------------------------------------------------------------
	// creates a hash table with field values of the data members
	//--------------------------------------------------------------------------------

  public void updateHashTable()
  {
		// FIELD NAMES VECTOR
		asFieldNames.put("serial", String.valueOf(serial));
		asFieldNames.put("nombre", nombre);
		asFieldNames.put("nombre_en", nombre_en);
		asFieldNames.put("descripcion", descripcion);

	}

  //--------------------------------------------------------------------------------
	// update data members with values stored in hash table
	//--------------------------------------------------------------------------------

	public void updateMembersFromHashTable() {
		// REVERSE FIELD NAMES VECTOR
		setSerial((String)asFieldNames.get("serial"));
		setNombre((String)asFieldNames.get("nombre"));
		setNombre_en((String)asFieldNames.get("nombre_en"));
		setDescripcion((String)asFieldNames.get("descripcion"));

	}

	//--------------------------------------------------------------------------------
	// constructor of the class. it initializes the object variables
	//--------------------------------------------------------------------------------

	// CONSTRUCTOR
	public void init()
	{
		lastError="No errors detected";
		serial = 0;
		nombre = "";
		nombre_en = "";
		descripcion = "";
		updateHashTable();
	}

	public eventos()
	{
		super("eventos object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// METHODS FOR: serial
	public String getSerial()
	{
		return Integer.toString(serial);
	}

	public void setSerial(String sParameter)
	{
		serial = extendedParseInt(sParameter);
	}
// end of methods for Serial
//--------------------------------------------------------------------------------
// METHODS FOR: nombre
	public String getNombre()
	{
		return nombre;
	}

	public void setNombre(String sParameter)
	{
		nombre = sParameter;
	}
// end of methods for Nombre
//--------------------------------------------------------------------------------
// METHODS FOR: nombre_en
	public String getNombre_en()
	{
		return nombre_en;
	}

	public void setNombre_en(String sParameter)
	{
		nombre_en = sParameter;
	}
// end of methods for Nombre_en
//--------------------------------------------------------------------------------
// METHODS FOR: descripcion
	public String getDescripcion()
	{
		return descripcion;
	}

	public void setDescripcion(String sParameter)
	{
		descripcion = sParameter;
	}
// end of methods for Descripcion

	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// retrieves object info from HTML form fields
	//--------------------------------------------------------------------------------
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		serial = extendedParseInt(req.getParameter(assignName("serial")));
		nombre = not_null(req.getParameter(assignName("nombre")));
		nombre_en = not_null(req.getParameter(assignName("nombre_en")));
		descripcion = not_null(req.getParameter(assignName("descripcion")));

		updateHashTable();
		return 0;
	}

	//--------------------------------------------------------------------------------
	// loads an object from a record read from database
	//--------------------------------------------------------------------------------
  public void loadWebObject(ResultSet rset)
    {
		try {
			// SQL_LOAD

			try {
				serial = rset.getInt("serial");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field serial -->";
				System.out.println(ex.toString());
			}

			try {
				nombre = not_null(rset.getString("nombre"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field nombre -->";
				System.out.println(ex.toString());
			}

			try {
				nombre_en = not_null(rset.getString("nombre_en"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field nombre_en -->";
				System.out.println(ex.toString());
			}

			try {
				descripcion = not_null(rset.getString("descripcion"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field descripcion -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	//--------------------------------------------------------------------------------
	// reads an object from the database
	//--------------------------------------------------------------------------------
  public int getWebObject(Connection con)
    {
		try {		
			// SQL_GET
			int f=1;
			sSql = "SELECT serial,nombre,nombre_en,descripcion FROM eventos";
			sSql += " WHERE (nombre = ?)";
			pstmt = con.prepareStatement(sSql);


			if (nombre == null || nombre.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, nombre);			rset = pstmt.executeQuery();
			int nrows = 1;
			if (rset.next())
				loadWebObject(rset);
			else
				nrows = 0;
			// releases the statement object
			rset.close();
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql
					+ " -->";
		}

		return -1;
	}

	/**
	* checks the lengths of strings are <= to what is defined in the database
	*
	*/
	public void checkLengths()
  {
		// CHECK_LENGTHS
		if (nombre.length()>30)
			nombre=nombre.substring(0,30);
		if (nombre_en.length()>30)
			nombre_en=nombre_en.substring(0,30);
		if (descripcion.length()>80)
			descripcion=descripcion.substring(0,80);
  }


	//--------------------------------------------------------------------------------
	// adds a new object to the database
	//--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {
		try {
			checkLengths();
			// SQL_INSERT
			int f=1;
			sSql = "insert into eventos (";
			sSql += "serial, nombre, nombre_en, descripcion)";
			sSql += "VALUES (?, ?, ?, ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, serial);

			if (nombre == null || nombre.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, nombre);

			if (nombre_en == null || nombre_en.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, nombre_en);

			if (descripcion == null || descripcion.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, descripcion);


			int nrows = pstmt.executeUpdate();
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			System.out.println("[DI9] ERROR (adding web object): EVENT "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			return -1;
		}
	}

	//--------------------------------------------------------------------------------
	// updates an existing object in the database
	//--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
		try {
			checkLengths();
			// SQL_UPDATE
			int f=1;
			sSql = "UPDATE eventos SET ";
			sSql += "serial = ?";
			sSql += ", nombre_en = ?";
			sSql += ", descripcion = ?";
			sSql += " WHERE (nombre = ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(f++, serial);

			if (nombre_en == null || nombre_en.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, nombre_en);

			if (descripcion == null || descripcion.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, descripcion);



			if (nombre == null || nombre.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, nombre);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
		}

		return -1;
	}

	//-------------------------------------------------------------------------------
	// deletes an existing object in the database
	//--------------------------------------------------------------------------------
	public int deleteWebObject(Connection con) {

		try {
			// SQL_DELETE
			int f=1;
			sSql = "DELETE FROM eventos";
			sSql += " WHERE (nombre = ?)";
			pstmt = con.prepareStatement(sSql);


			if (nombre == null || nombre.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, nombre);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
		}
		return -1;
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>serial:</td><td>  <INPUT type='TEXT' size='5' maxlength='6' name='serial' VALUE="<%=beanName.serial%>"></td></tr>
<tr><td>nombre:</td><td>  <INPUT type='TEXT' size='16' maxlength='15' name='nombre' VALUE="<%=beanName.nombre%>"></td></tr>
<tr><td>nombre_en:</td><td>  <INPUT type='TEXT' size='16' maxlength='15' name='nombre_en' VALUE="<%=beanName.nombre_en%>"></td></tr>
<tr><td>descripcion:</td><td>  <INPUT type='TEXT' size='50' maxlength='100' name='descripcion' VALUE="<%=beanName.descripcion%>"></td></tr>
</table>
END HTML TEMPLATE */
