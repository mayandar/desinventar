//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;


//CLASS NAME
// generated by WebObjectGenerator...
public class MetadataElementLang extends webObject
{
//    public int dbType=Sys.iDatabaseType;	

	// DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
	public 	int    metadata_element_key;
	public 	String metadata_country;
	public 	String metadata_lang;
	public 	String metadata_element_sector;
	public 	String metadata_element_source;
	public 	String metadata_element_description;
	public 	String metadata_element_unit;
	public 	String metadata_element_measurement;

	/**
	* creates a hash table with field values of the data members
	*
	*/

	public void updateHashTable() {
		// FIELD NAMES VECTOR
		asFieldNames.put("metadata_element_key", String.valueOf(metadata_element_key));
		asFieldNames.put("metadata_country", metadata_country);
		asFieldNames.put("metadata_lang", metadata_lang);
		asFieldNames.put("metadata_element_sector", metadata_element_sector);
		asFieldNames.put("metadata_element_source", metadata_element_source);
		asFieldNames.put("metadata_element_description", metadata_element_description);
		asFieldNames.put("metadata_element_unit", metadata_element_unit);
		asFieldNames.put("metadata_element_measurement", metadata_element_measurement);

	}

	/**
	* update data members with values stored in hash table
	*
	*/

	public void updateMembersFromHashTable() {
		// REVERSE FIELD NAMES VECTOR
		setMetadata_element_key((String)asFieldNames.get("metadata_element_key"));
		setMetadata_country((String)asFieldNames.get("metadata_country"));
		setMetadata_lang((String)asFieldNames.get("metadata_lang"));
		setMetadata_element_sector((String)asFieldNames.get("metadata_element_sector"));
		setMetadata_element_source((String)asFieldNames.get("metadata_element_source"));
		setMetadata_element_description((String)asFieldNames.get("metadata_element_description"));
		setMetadata_element_unit((String)asFieldNames.get("metadata_element_unit"));
		setMetadata_element_measurement((String)asFieldNames.get("metadata_element_measurement"));

	}
	/**
	* constructor of the class. it initialises the object variables
	*
	*/

	// CONSTRUCTOR
	public void init() {
		lastError="No errors detected";
		metadata_element_key = 0;
		metadata_country = "";
		metadata_lang = "";
		metadata_element_sector = "";
		metadata_element_source = "";
		metadata_element_description = "";
		metadata_element_unit = "";
		metadata_element_measurement = "";
		updateHashTable();
	}

	public MetadataElementLang() {
		super("MetadataElementLang object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'metadata_element_key'
	public String getMetadata_element_key() {
		return Integer.toString(metadata_element_key);
	}

	public void setMetadata_element_key(String sParameter) {
		metadata_element_key = extendedParseInt(sParameter);
	}

	public void setMetadata_element_key(int sParameter) {
		metadata_element_key = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'metadata_country'
	public String getMetadata_country() {
		return metadata_country;
	}

	public void setMetadata_country(String sParameter) {
		metadata_country = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'metadata_lang'
	public String getMetadata_lang() {
		return metadata_lang;
	}

	public void setMetadata_lang(String sParameter) {
		metadata_lang = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'metadata_element_sector'
	public String getMetadata_element_sector() {
		return metadata_element_sector;
	}

	public void setMetadata_element_sector(String sParameter) {
		metadata_element_sector = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'metadata_element_source'
	public String getMetadata_element_source() {
		return metadata_element_source;
	}

	public void setMetadata_element_source(String sParameter) {
		metadata_element_source = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'metadata_element_description'
	public String getMetadata_element_description() {
		return metadata_element_description;
	}

	public void setMetadata_element_description(String sParameter) {
		metadata_element_description = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'metadata_element_unit'
	public String getMetadata_element_unit() {
		return metadata_element_unit;
	}

	public void setMetadata_element_unit(String sParameter) {
		metadata_element_unit = sParameter;
	}
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// Access methods for database field 'metadata_element_measurement'
	public String getMetadata_element_measurement() {
		return metadata_element_measurement;
	}

	public void setMetadata_element_measurement(String sParameter) {
		metadata_element_measurement = sParameter;
	}
//--------------------------------------------------------------------------------


	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	/**
	* retrieves object info from HTML form fields
	*
	*/
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		setMetadata_element_key(req.getParameter(assignName("metadata_element_key")));
		setMetadata_country(not_null(req.getParameter(assignName("metadata_country"))));
		setMetadata_lang(not_null(req.getParameter(assignName("metadata_lang"))));
		setMetadata_element_sector(not_null(req.getParameter(assignName("metadata_element_sector"))));
		setMetadata_element_source(not_null(req.getParameter(assignName("metadata_element_source"))));
		setMetadata_element_description(not_null(req.getParameter(assignName("metadata_element_description"))));
		setMetadata_element_unit(not_null(req.getParameter(assignName("metadata_element_unit"))));
		setMetadata_element_measurement(not_null(req.getParameter(assignName("metadata_element_measurement"))));

		updateHashTable();
		return 0;
	}

	/**
	* retrieves object info from HTML form fields
	*
	*/
	public int getForm(ServletRequest req, ServletResponse resp, Connection con) {

		// GET_FORM()
		setMetadata_element_key(req.getParameter(assignName("metadata_element_key")));
		setMetadata_country(not_null(req.getParameter(assignName("metadata_country"))));
		setMetadata_lang(not_null(req.getParameter(assignName("metadata_lang"))));
		setMetadata_element_sector(not_null(req.getParameter(assignName("metadata_element_sector"))));
		setMetadata_element_source(not_null(req.getParameter(assignName("metadata_element_source"))));
		setMetadata_element_description(not_null(req.getParameter(assignName("metadata_element_description"))));
		setMetadata_element_unit(not_null(req.getParameter(assignName("metadata_element_unit"))));
		setMetadata_element_measurement(not_null(req.getParameter(assignName("metadata_element_measurement"))));

		updateHashTable();
		return 0;
	}


	/**
	* loads an object from a record read from database
	*
	*/
	public void loadWebObject(ResultSet rset) {
		try {
			// SQL_LOAD

			try {
				metadata_element_key = rset.getInt("metadata_element_key");

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field metadata_element_key -->";
				System.out.println(ex.toString());
			}

			try {
				metadata_country = not_null(rset.getString("metadata_country"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field metadata_country -->";
				System.out.println(ex.toString());
			}

			try {
				metadata_lang = not_null(rset.getString("metadata_lang"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field metadata_lang -->";
				System.out.println(ex.toString());
			}

			try {
				metadata_element_sector = not_null(rset.getString("metadata_element_sector"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field metadata_element_sector -->";
				System.out.println(ex.toString());
			}

			try {
				metadata_element_source = not_null(rset.getString("metadata_element_source"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field metadata_element_source -->";
				System.out.println(ex.toString());
			}

			try {
				metadata_element_description = not_null(rset.getString("metadata_element_description"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field metadata_element_description -->";
				System.out.println(ex.toString());
			}

			try {
				metadata_element_unit = not_null(rset.getString("metadata_element_unit"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field metadata_element_unit -->";
				System.out.println(ex.toString());
			}

			try {
				metadata_element_measurement = not_null(rset.getString("metadata_element_measurement"));

			} catch (Exception ex) {
				lastError = "<-- error attempting to access field metadata_element_measurement -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	/**
	* reads an object from the database
	*
	*/
	public int getWebObject(Connection con) 
	{
		int nrows = 0;
		try {		
			// SQL_GET
			int f=1;
			sSql = "SELECT * FROM metadata_element_lang";
			sSql += " WHERE (metadata_element_key = ?) AND (metadata_country = ?) AND (metadata_lang = ?)";
			pstmt = con.prepareStatement(sSql);

				pstmt.setInt(f++, metadata_element_key);

			if (metadata_country==null || metadata_country.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_country);

			if (metadata_lang==null || metadata_lang.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_lang);


			rset = pstmt.executeQuery();
			if (rset.next()) {
				loadWebObject(rset);
				nrows = 1;				
			}			
			// releases the statement object
			rset.close();
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql	+ " -->";
			nrows = -1;
		}
		finally {
			// releases the statement object
			try { pstmt.close(); } catch (Exception ignrd) {}
		}

		return nrows;
	}



	/**
	* checks the lengths of strings are <= to what is defined in the database
	*
	*/
	public void checkLengths()
    {
		// CHECK_LENGTHS
		if (metadata_country.length()>10)
			metadata_country=metadata_country.substring(0,10);
		if (metadata_lang.length()>10)
			metadata_lang=metadata_lang.substring(0,10);
		if (metadata_element_sector.length()>250)
			metadata_element_sector=metadata_element_sector.substring(0,250);
		if (metadata_element_source.length()>250)
			metadata_element_source=metadata_element_source.substring(0,250);
		if (metadata_element_description.length()>250)
			metadata_element_description=metadata_element_description.substring(0,250);
		if (metadata_element_unit.length()>30)
			metadata_element_unit=metadata_element_unit.substring(0,30);
		if (metadata_element_measurement.length()>10)
			metadata_element_measurement=metadata_element_measurement.substring(0,10);
    }

	/**
	* adds a new object to the database
	*
	*/
	public int addWebObject(Connection con)
    {
		int nrows = 0;
		try {
			// SQL_INSERT
			int f=1;
			sSql = "insert into metadata_element_lang (";
			sSql += "metadata_element_key, metadata_country, metadata_lang, metadata_element_sector";
			sSql += ", metadata_element_source, metadata_element_description, metadata_element_unit";
			sSql += ", metadata_element_measurement)";
			sSql += "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
			pstmt = con.prepareStatement(sSql);

				pstmt.setInt(f++, metadata_element_key);
			if (metadata_country==null || metadata_country.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_country);
			if (metadata_lang==null || metadata_lang.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_lang);
			if (metadata_element_sector==null || metadata_element_sector.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_element_sector);
			if (metadata_element_source==null || metadata_element_source.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_element_source);
			if (metadata_element_description==null || metadata_element_description.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_element_description);
			if (metadata_element_unit==null || metadata_element_unit.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_element_unit);
			if (metadata_element_measurement==null || metadata_element_measurement.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_element_measurement);


			nrows = pstmt.executeUpdate();
			lastError = ""; // "NO ERROR. sql="+sSql;
		} catch (Exception ex) {
			//Trap and report SQL errors
			System.out.println("ERROR (adding web object): "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			nrows=-1;
		}
		finally {
			// releases the statement object
			try { pstmt.close(); } catch (Exception ignrd) {}
		}
		return nrows;		
	}

  	/**
  	* updates an existing object in the database
  	*
  	*/
  	public int updateWebObject(Connection con)
    {
		int nrows = 0;
		try {
			// SQL_UPDATE
			int f=1;
			sSql = "UPDATE metadata_element_lang SET ";
			sSql += "metadata_element_sector = ?";
			sSql += ", metadata_element_source = ?";
			sSql += ", metadata_element_description = ?";
			sSql += ", metadata_element_unit = ?";
			sSql += ", metadata_element_measurement = ?";
			sSql += " WHERE (metadata_element_key = ?) AND (metadata_country = ?) AND (metadata_lang = ?)";
			pstmt = con.prepareStatement(sSql);

			if (metadata_element_sector==null || metadata_element_sector.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, metadata_element_sector);
			if (metadata_element_source==null || metadata_element_source.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, metadata_element_source);
			if (metadata_element_description==null || metadata_element_description.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, metadata_element_description);
			if (metadata_element_unit==null || metadata_element_unit.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, metadata_element_unit);
			if (metadata_element_measurement==null || metadata_element_measurement.length()==0)
				pstmt.setNull(f++, java.sql.Types.VARCHAR);
			else 
				pstmt.setString(f++, metadata_element_measurement);


				pstmt.setInt(f++, metadata_element_key);

			if (metadata_country==null || metadata_country.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_country);

			if (metadata_lang==null || metadata_lang.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_lang);


			nrows = pstmt.executeUpdate();
			lastError = ""; // "NO ERROR. sql="+sSql;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
			nrows=-1;
		}
		finally {
			// releases the statement object
			try { pstmt.close(); } catch (Exception ignrd) {}
		}
		return nrows;		
	}

	/**
	* deletes an existing object in the database
	*
	*/
	public int deleteWebObject(Connection con) 
	{
		int nrows = 0;
		try {
			// SQL_DELETE
			int f=1;
			sSql = "DELETE FROM metadata_element_lang";
			sSql += " WHERE (metadata_element_key = ?) AND (metadata_country = ?) AND (metadata_lang = ?)";
			pstmt = con.prepareStatement(sSql);

				pstmt.setInt(f++, metadata_element_key);

			if (metadata_country==null || metadata_country.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_country);

			if (metadata_lang==null || metadata_lang.length() == 0)
				pstmt.setNull(f++, Types.VARCHAR);
			else
				pstmt.setString(f++, metadata_lang);


			nrows = pstmt.executeUpdate();
			lastError = ""; // "NO ERROR. sql="+sSql;
		} catch (Exception ex) {
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
			nrows=-1;
		}
		finally {
			// releases the statement object
			try { pstmt.close(); } catch (Exception ignrd) {}
		}
		return nrows;		
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>metadata_element_key:</td><td>  <INPUT type='TEXT' size='5' maxlength='11' name='metadata_element_key' VALUE="<%=beanName.metadata_element_key%>"></td></tr>
<tr><td>metadata_country:</td><td>  <INPUT type='TEXT' size='11' maxlength='10' name='metadata_country' VALUE="<%=beanName.metadata_country%>"></td></tr>
<tr><td>metadata_lang:</td><td>  <INPUT type='TEXT' size='11' maxlength='10' name='metadata_lang' VALUE="<%=beanName.metadata_lang%>"></td></tr>
<tr><td>metadata_element_sector:</td><td>  <INPUT type='TEXT' size='50' maxlength='250' name='metadata_element_sector' VALUE="<%=beanName.metadata_element_sector%>"></td></tr>
<tr><td>metadata_element_source:</td><td>  <INPUT type='TEXT' size='50' maxlength='250' name='metadata_element_source' VALUE="<%=beanName.metadata_element_source%>"></td></tr>
<tr><td>metadata_element_description:</td><td>  <INPUT type='TEXT' size='50' maxlength='250' name='metadata_element_description' VALUE="<%=beanName.metadata_element_description%>"></td></tr>
<tr><td>metadata_element_unit:</td><td>  <INPUT type='TEXT' size='31' maxlength='30' name='metadata_element_unit' VALUE="<%=beanName.metadata_element_unit%>"></td></tr>
<tr><td>metadata_element_measurement:</td><td>  <INPUT type='TEXT' size='11' maxlength='10' name='metadata_element_measurement' VALUE="<%=beanName.metadata_element_measurement%>"></td></tr>
</table>
END HTML TEMPLATE */
