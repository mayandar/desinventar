//PACKAGE NAME
package org.lared.desinventar.webobject;

import java.io.*;
import java.util.*;
import java.sql.*;
import java.math.*;
import java.text.*;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*;

import org.lared.desinventar.util.*;
import org.lared.desinventar.system.*;
import org.lared.desinventar.webobject.*;


//CLASS NAME
// generated by persistentObjectGenerator...
public class words extends webObject
{
	// DATA MEMBERS OF THE CLASS. THEY ARE EXACT MAPPING OF DB. RECORD.
     public   int      wordid;
     public   String word;
     public   int      occurrences;

	//--------------------------------------------------------------------------------
	// creates a hash table with field values of the data members
	//--------------------------------------------------------------------------------

  public void updateHashTable()
  {
		// FIELD NAMES VECTOR
		asFieldNames.put("wordid", String.valueOf(wordid));
		asFieldNames.put("word", word);
		asFieldNames.put("occurrences", String.valueOf(occurrences));

	}

	//--------------------------------------------------------------------------------
	// constructor of the class. it initializes the object variables
	//--------------------------------------------------------------------------------

	// CONSTRUCTOR
	public void init()
	{
		lastError="No errors detected";
		wordid = 0;
		word = "";
		occurrences = 0;
		updateHashTable();
	}

	public words()
	{
		super("words object");
		init();
	}
//--------------------------------------------------------------------------------
// getter and setter methods of the elements of the class
//--------------------------------------------------------------------------------

//--------------------------------------------------------------------------------
// METHODS FOR: wordid
	public String getWordid()
	{
		return Integer.toString(wordid);
	}

	public void setWordid(String sParameter)
	{
		wordid = extendedParseInt(sParameter);
	}
// end of methods for Wordid
//--------------------------------------------------------------------------------
// METHODS FOR: word
	public String getWord()
	{
		return word;
	}

	public void setWord(String sParameter)
	{
		word = sParameter;
	}
// end of methods for Word
//--------------------------------------------------------------------------------
// METHODS FOR: occurrences
	public String getOccurrences()
	{
		return Integer.toString(occurrences);
	}

	public void setOccurrences(String sParameter)
	{
		occurrences = extendedParseInt(sParameter);
	}
// end of methods for Occurrences

	//----------------------------------------------------------------
	// Operational methods any webObject must have. Abstract class
	// provides templates and default behaviour (return error)
	//----------------------------------------------------------------

	//--------------------------------------------------------------------------------
	// retrieves object info from HTML form fields
	//--------------------------------------------------------------------------------
	public int getForm(HttpServletRequest req, HttpServletResponse resp, Connection con) {

		// GET_FORM()
		wordid = extendedParseInt(req.getParameter(assignName("wordid")));
		word = not_null(req.getParameter(assignName("word")));
		occurrences = extendedParseInt(req.getParameter(assignName("occurrences")));

		updateHashTable();
		return 0;
	}

	//--------------------------------------------------------------------------------
	// loads an object from a record read from database
	//--------------------------------------------------------------------------------
  public void loadWebObject(ResultSet rset)
    {
		try {
			// SQL_LOAD

			try {
				wordid = rset.getInt("wordid");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field wordid -->";
				System.out.println(ex.toString());
			}

			try {
				word = not_null(rset.getString("word"));
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field word -->";
				System.out.println(ex.toString());
			}

			try {
				occurrences = rset.getInt("occurrences");
			} catch (Exception ex) {
				lastError = "<-- error attempting to access field occurrences -->";
				System.out.println(ex.toString());
			}

		} catch (Exception e) {
			lastError = "<!-- Error loading WebObject: " + e.toString() + " : " + sSql + " -->";
		}
		updateHashTable();
	}

	//--------------------------------------------------------------------------------
	// reads an object from the database
	//--------------------------------------------------------------------------------
  public int getWebObject(Connection con)
    {
		try {		
			// SQL_GET
			sSql = "SELECT * FROM words";
			sSql += " WHERE (word = ?)";
			pstmt = con.prepareStatement(sSql);


			if (word == null || word.length() == 0)
				pstmt.setNull(1, Types.VARCHAR);
			else
				pstmt.setString(1, word);			rset = pstmt.executeQuery();
			int nrows = 1;
			if (rset.next())
				loadWebObject(rset);
			else
				nrows = 0;
			// releases the statement object
			rset.close();
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			try{
		    	pstmt.close();
		    }
		    catch(Exception e)
		    {
		    	// do nothing for now
		    }

			//Trap and report SQL errors
			lastError = "<!-- Error getting webObject: " + ex.toString() + " : " + sSql
					+ " -->";
		}

		return -1;
	}

	//--------------------------------------------------------------------------------
	// adds a new object to the database
	//--------------------------------------------------------------------------------
  public int addWebObject(Connection con)
    {
		try {
			// SQL_INSERT
			sSql = "insert into words (";
			sSql += "wordid, word, occurrences)";
			sSql += " VALUES (?, ?, ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(1, wordid);
			pstmt.setString(2, word);
			pstmt.setInt(3, occurrences);


			int nrows = pstmt.executeUpdate();
			
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			try{
		    	pstmt.close();
		    }
		    catch(Exception e)
		    {
		    	// do nothing for now
		    }
			//Trap and report SQL errors
			// System.out.println("ERROR (adding web object): "+ex.toString());
			lastError = "<!-- Error adding webObject: " + ex.toString() + " : " + sSql + " -->";
			return -1;
		}
	}

	//--------------------------------------------------------------------------------
	// updates an existing object in the database
	//--------------------------------------------------------------------------------
  public int updateWebObject(Connection con)
    {
		try {
			// SQL_UPDATE
			sSql = "UPDATE words SET ";
			sSql += "wordid = ?";
			sSql += ", word = ?";
			sSql += ", occurrences = ?";
			sSql += " WHERE (word = ?)";
			pstmt = con.prepareStatement(sSql);

			pstmt.setInt(1, wordid);

			if (word == null || word.length() == 0)
				pstmt.setNull(2, Types.VARCHAR);
			else
				pstmt.setString(2, word);
			pstmt.setInt(3, occurrences);

			if (word == null || word.length() == 0)
				pstmt.setNull(4, Types.VARCHAR);
			else
				pstmt.setString(4, word);

			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			try{
		    	pstmt.close();
		    }
		    catch(Exception e)
		    {
		    	// do nothing for now
		    }
			//Trap and report SQL errors
			lastError = "<!-- Error updating webObject: " + ex.toString() + " : " + sSql + " -->";
		}

		return -1;
	}

	//-------------------------------------------------------------------------------
	// deletes an existing object in the database
	//--------------------------------------------------------------------------------
	public int deleteWebObject(Connection con) {

		try {
			// SQL_DELETE
			sSql = "DELETE FROM words";
			sSql += " WHERE (word = ?)";
			pstmt = con.prepareStatement(sSql);


			if (word == null || word.length() == 0)
				pstmt.setNull(1, Types.VARCHAR);
			else
				pstmt.setString(1, word);


			int nrows = pstmt.executeUpdate();
			// releases the statement object
			pstmt.close();
			lastError = ""; // "NO ERROR. sql="+sSql;
			return nrows;
		} catch (Exception ex) {
			try{
		    	pstmt.close();
		    }
		    catch(Exception e)
		    {
		    	// do nothing for now
		    }
			//Trap and report SQL errors
			lastError = "<!-- Error deleting webObject: " + ex.toString() + " : " + sSql + " -->";
		}
		return -1;
	}
}

/*    HTML TEMPLATE
<table border=0 cellspacing=0 cellpadding=0>
<tr><td>wordid:</td><td>  <INPUT type='TEXT' size='5' maxlength='11' name='wordid' VALUE="<%=beanName.wordid%>"></td></tr>
<tr><td>word:</td><td>  <INPUT type='TEXT' size='33' maxlength='32' name='word' VALUE="<%=beanName.word%>"></td></tr>
<tr><td>occurrences:</td><td>  <INPUT type='TEXT' size='5' maxlength='11' name='occurrences' VALUE="<%=beanName.occurrences%>"></td></tr>
</table>
END HTML TEMPLATE */
